<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Tests
{
	using System;
	using System.Xml;
	using System.Collections.Generic;

	using Microsoft.VisualStudio.TestTools.UnitTesting;

	using <#=Context.ProcessorContext.ProjectName#>.Core;
	using <#=Context.ProcessorContext.ProjectName#>.Models;

	[TestClass]
	public partial class Models_<#=Context.Table.Name#>ModelTests
	{
		public static <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> Create<#=Context.Table.Name#>()
		{
			var entity = new <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>();

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsIdColumn || column.IsOwnershipColumn)
		{
			continue;
		}

		if (column.IsForeignKey)
		{
			continue;
		}

		if (column.IsLanguageColumn)
		{
#>

			entity.<#=column.CSharpPropertyName#> = new LanguageCollection()
			{
<#
			int i = 0;
			foreach (var languageColumn in column.LanguageColumns)
			{
#>
				<#=column.DefaultValues[i].Culture#> = RandomHelper.GetRandomString(<#if (column.MaximumLength > 512) { this.Write("512"); } else { this.Write(column.MaximumLength.ToString()); } #>)<#if (i < column.DefaultValues.Length - 1) { #>,<# }#>

<#
				i++;
			}
#>
			};
<#
		}
		else
		{
			if (!column.IsNullable)
			{
				switch (column.CSharpTypeName)
				{
					case "string":
#>
			entity.<#=column.CSharpPropertyName#> = RandomHelper.GetRandomString(<#if (column.MaximumLength > 512) { this.Write("512"); } else { this.Write(column.MaximumLength.ToString()); } #>);
<#
						break;
					case "int":
					case "int?":
#>
			entity.<#=column.CSharpPropertyName#> = 0;
<#
						break;
					case "long":
					case "long?":
#>
			entity.<#=column.CSharpPropertyName#> = 0;
<#
						break;
					case "decimal":
					case "decimal?":
#>
			entity.<#=column.CSharpPropertyName#> = 0;
<#
						break;
					case "DateTime":
					case "DateTime?":
#>
			entity.<#=column.CSharpPropertyName#> = DateTime.Now;
<#
						break;
					case "bool":
					case "bool?":
#>
			entity.<#=column.CSharpPropertyName#> = true;
<#
						break;
					case "Guid":
#>
			entity.<#=column.CSharpPropertyName#> = DateTime.Now.ToLongTimeString().ToGuid();
<#
						break;
					default:
#>
			entity.<#=column.CSharpPropertyName#> = #?# (-> <#=column.CSharpTypeName#>);
<#
						break;
				}
			}
			else
			{
#>
			entity.<#=column.CSharpPropertyName#> = default(<#=column.CSharpTypeName#>);
<#
			}
		}
	}

	if (Context.Table.ZeroToOneRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToOneRelations.Where(i => !i.IsLoop))
		{
#>
			entity.<#=relation.CSharpPropertyName#> = Models_<#=relation.ReferencedTableName#>ModelTests.Create<#=relation.ReferencedTableName#>();
<#
		}
	}
#>

			// Defines in the <#=Context.Table.Name#>ModelTests.custom.cs file to extend or override properties values.
			InitializeInstance(entity);
			return entity;
		}
		
		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Models_<#=Context.Table.Name#>_IsValid()
		{
			var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();
			IList<TranslationEnum> errors;

			if (entity.IsValid(out errors))
			{
				Assert.IsTrue(errors.Count == 0);
			}
			else
			{
				Assert.IsTrue(errors.Count != 0);
			}
		}

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Models_<#=Context.Table.Name#>_Clone()
		{
			var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();
			var clone = entity.DeepCopy<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>>();

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsLanguageColumn)
		{
			for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
			{
#>
			Assert.IsTrue(clone.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"] == entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"]);
<#
			}
		}
		else
		{
#>
			Assert.IsTrue(clone.<#=column.CSharpPropertyName#> == entity.<#=column.CSharpPropertyName#>);
<#
		}
	}
#>
			Assert.IsTrue(clone.State == entity.State);
		}

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Models_<#=Context.Table.Name#>_ToXml()
		{
			var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();
			
			XmlDocument xmlDoc = new XmlDocument();
			xmlDoc.LoadXml(entity.ToXml());
		}

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Models_<#=Context.Table.Name#>_IsOwnershipEntity()
		{
			var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();
<#
	if (Context.Table.IsOwnership)
	{
#>
			Assert.IsTrue(entity.IsOwnershipEntity());
<#
	}
	else
	{
#>
			Assert.IsFalse(entity.IsOwnershipEntity());
<#
	}
#>
		}
	}
}