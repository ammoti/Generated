//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Models
{
	using System.Collections.Concurrent;

	public abstract partial class EntityBase
	{
		#region [ Properties ]

		private ConcurrentDictionary<string, object> _dynamicProperties = null;
		protected ConcurrentDictionary<string, object> DynamicProperties
		{
			get
			{
				if (_dynamicProperties == null)
					_dynamicProperties = new ConcurrentDictionary<string, object>();

				return _dynamicProperties;
			}
		}

		#endregion

		/// <summary>
		/// Gets or sets the value of the dynamic property.
		/// </summary>
		/// 
		/// <param name="propertyName">
		/// Name of the dynamic property.
		/// </param>
		/// 
		/// <returns>
		/// The value of the dynamic property.
		/// </returns>
		public object this[string propertyName]
		{
			get
			{
				return (this.DynamicProperties.ContainsKey(propertyName)) ? this.DynamicProperties[propertyName] : null;
			}
			set
			{
				if (!this.DynamicProperties.ContainsKey(propertyName) || value != this.DynamicProperties[propertyName])
				{
					this.DynamicProperties[propertyName] = value;
					this.NotifyPropertyChanged(string.Format("[{0}]", propertyName));
				}
			}
		}

		/// <summary>
		/// Determines whether the dynamic property exists.
		/// </summary>
		/// 
		/// <param name="propertyName">
		/// Name of the dynamic property.
		/// </param>
		/// 
		/// <param name="checkNotNullValue">
		/// If true then checks whether the dynamic property has a value != null.
		/// </param>
		/// 
		/// <returns>
		/// True if the dynamic property exists; otherwise, false.
		/// </returns>
		public bool HasDynamicProperty(string propertyName, bool checkNotNullValue = false)
		{
			if (!string.IsNullOrEmpty(propertyName))
			{
				if (_dynamicProperties.ContainsKey(propertyName))
				{
					if (checkNotNullValue)
					{
						return this[propertyName] != null;
					}

					return true;
				}
			}

			return false;
		}
	}
}