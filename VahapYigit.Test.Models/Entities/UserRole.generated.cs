//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Models
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Data;
	using System.Diagnostics;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Xml.Serialization;

	using VahapYigit.Test.Core;

	/// <summary>
	/// Entity mapped to UserRole DB table.
	/// </summary>
	[Serializable]
	[DataContract(Namespace = Globals.Namespace, IsReference = true)]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public partial class UserRole : EntityBase, IUserRole
	{
		/// <summary>
		/// Gets the name of the entity.
		/// </summary>
		public static readonly string EntityName = "UserRole";

		#region [ Constructor ]

		/// <summary>
		/// Default constructor.
		/// </summary>
		public UserRole()
			: base()
		{
			this.Initialize();
		}

		#endregion

		#region [ Events ]

		#endregion

		#region [ Column Names ]

		/// <summary>
		/// Contains the entity column names.
		/// </summary>
		public static partial class ColumnNames
		{
			/// <summary>
			/// Name of the Id column ("UserRole_Id").
			/// </summary>
			public static readonly string Id = "UserRole_Id";

			/// <summary>
			/// Name of the IdUser column ("UserRole_IdUser").
			/// </summary>
			public static readonly string IdUser = "UserRole_IdUser";

			/// <summary>
			/// Name of the IdRole column ("UserRole_IdRole").
			/// </summary>
			public static readonly string IdRole = "UserRole_IdRole";

		}

		#endregion

		#region [ Property Names ]

		/// <summary>
		/// Contains the entity property names.
		/// </summary>
		public static partial class PropertyNames
		{
			/// <summary>
			/// Name of the Id property ("Id").
			/// </summary>
			public static readonly string Id = "Id";

			/// <summary>
			/// Name of the IdUser property ("IdUser").
			/// </summary>
			public static readonly string IdUser = "IdUser";

			/// <summary>
			/// Name of the IdRole property ("IdRole").
			/// </summary>
			public static readonly string IdRole = "IdRole";

		}

		#endregion

		#region [ Properties ]

		#region [ IdUser ]

		private long _IdUser;

		/// <summary>
		/// Gets or sets the IdUser value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual long IdUser
		{
			get { return _IdUser; }
			set
			{
				if (value != _IdUser)
				{
					_IdUser = value;

					if (!_deserializing)
					{
						if (_User != null && _IdUser != _User.Id)
						{
							_User = null;
						}

						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateIdUser();
					}
				}
			}
		}

		private bool ValidateIdUser()
		{
			bool isValid = false;

			do
			{
				if (this.IdUser <= 0 && this.User == null)
				{
					base.AddValidationError("IdUser", TranslationEnum.ModelUserRoleIdUserIsRequired);
					break;
				}


				base.RemoveValidationErrors("IdUser");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ IdRole ]

		private long _IdRole;

		/// <summary>
		/// Gets or sets the IdRole value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual long IdRole
		{
			get { return _IdRole; }
			set
			{
				if (value != _IdRole)
				{
					_IdRole = value;

					if (!_deserializing)
					{
						if (_Role != null && _IdRole != _Role.Id)
						{
							_Role = null;
						}

						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateIdRole();
					}
				}
			}
		}

		private bool ValidateIdRole()
		{
			bool isValid = false;

			do
			{
				if (this.IdRole <= 0 && this.Role == null)
				{
					base.AddValidationError("IdRole", TranslationEnum.ModelUserRoleIdRoleIsRequired);
					break;
				}


				base.RemoveValidationErrors("IdRole");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#endregion

		#region [ References ]

		private User _User;
		/// <summary>
		/// Referenced User entity by this entity.
		/// </summary>
		[DataMember()]
		public virtual User User
		{
			get { return _User; }
			set
			{
				if (value != _User)
				{
					_User = value;

					if (!_deserializing)
					{
						if (_User == null)
						{
							_IdUser = 0;
						}
						else if (_User.Id == 0)
						{
							if (_IdUser != 0)
							{
								_IdUser = 0;
							}
							else
							{
								base.UpdateState();
							}
						}
						else if (_User.Id != _IdUser)
						{
							_IdUser = _User.Id;
						}
					}
				}
			}
		}

		private Role _Role;
		/// <summary>
		/// Referenced Role entity by this entity.
		/// </summary>
		[DataMember()]
		public virtual Role Role
		{
			get { return _Role; }
			set
			{
				if (value != _Role)
				{
					_Role = value;

					if (!_deserializing)
					{
						if (_Role == null)
						{
							_IdRole = 0;
						}
						else if (_Role.Id == 0)
						{
							if (_IdRole != 0)
							{
								_IdRole = 0;
							}
							else
							{
								base.UpdateState();
							}
						}
						else if (_Role.Id != _IdRole)
						{
							_IdRole = _Role.Id;
						}
					}
				}
			}
		}

		#endregion

		#region [ EntityBase Implementation ]

		/// <summary>
		/// Gets the entity properties validity.
		/// </summary>
		/// 
		/// <param name="errors">
		/// Translation errors list (each item represents a translation key of an error).
		/// </param>
		/// 
		/// <returns>
		/// True if all the entity properties are correct; otherwise, false.
		/// </returns>
		public override bool IsValid(out IList<TranslationEnum> errors)
		{
			IList<TranslationEnum> errs = new List<TranslationEnum>();

			if (!this.ValidateIdUser())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("IdUser");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateIdRole())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("IdRole");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			errors = errs;

			return errors.Count == 0;
		}
		
		/// <summary>
		/// Fill the entity properties using a source.
		/// </summary>
		/// 
		/// <param name="source">
		/// Source.
		public override void Map(EntityBase source)
		{
			if (source == null)
			{
				ThrowException.ThrowArgumentNullException("source");
			}

			if (!(source is UserRole))
			{
				ThrowException.ThrowArgumentException("The 'source' argument is not a 'UserRole' instance");
			}

			this.IdUser = ((UserRole)source).IdUser;
			this.IdRole = ((UserRole)source).IdRole;

			this.Id = source.Id;
			this.State = source.State;
		}

		/// <summary>
		/// Fills the entity properties using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(IDataReader source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.IdUser = TypeHelper.To<long>(source[string.Format("{0}IdUser", columnPrefix)]);
			this.IdRole = TypeHelper.To<long>(source[string.Format("{0}IdRole", columnPrefix)]);

			this.State = EntityState.None;
		}

		/// <summary>
		/// Fill the entity properties using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(DataRow source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.IdUser = TypeHelper.To<long>(source[string.Format("{0}IdUser", columnPrefix)]);
			this.IdRole = TypeHelper.To<long>(source[string.Format("{0}IdRole", columnPrefix)]);

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fills the entity properties and all its dependencies using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(IDataReader source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			if (this.User == null &&
				source.HasColumn(User.ColumnNames.Id) && source[User.ColumnNames.Id] != DBNull.Value)
			{
				this.User = new User();
				this.User.UserRoleCollection.Add(this);

				this.User.DeepMap(source, userContext);

				this.IdUser = this.User.Id;
			}

			if (this.Role == null &&
				source.HasColumn(Role.ColumnNames.Id) && source[Role.ColumnNames.Id] != DBNull.Value)
			{
				this.Role = new Role();
				this.Role.UserRoleCollection.Add(this);

				this.Role.DeepMap(source, userContext);

				this.IdRole = this.Role.Id;
			}

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fill the entity properties and all its dependencies using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(DataRow source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			if (this.User == null &&
				source.HasColumn(User.ColumnNames.Id) && source[User.ColumnNames.Id] != DBNull.Value)
			{
				this.User = new User();
				this.User.UserRoleCollection.Add(this);

				this.User.DeepMap(source, userContext);
			}

			if (this.Role == null &&
				source.HasColumn(Role.ColumnNames.Id) && source[Role.ColumnNames.Id] != DBNull.Value)
			{
				this.Role = new Role();
				this.Role.UserRoleCollection.Add(this);

				this.Role.DeepMap(source, userContext);
			}

			this.State = EntityState.None;
		}

		#endregion
	}
}