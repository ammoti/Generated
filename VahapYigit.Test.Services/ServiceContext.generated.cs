//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//-----------------------------------------------------------------------------

namespace VahapYigit.Test.Services
{
	using System;
	using System.Diagnostics;

	/// <summary>
	/// Contains the default registered service instances (each service is shared).
	/// </summary>
	public static partial class ServiceContext
	{
		private static readonly object _locker = new object();

		/// <summary>
		/// Gets the default AppSettingsService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IAppSettingsService AppSettingsService
		{
			get
			{
				const string name = "AppSettingsService.Default";
				VahapYigit.Test.Contracts.IAppSettingsService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IAppSettingsService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IAppSettingsService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IAppSettingsService>(
								name, new VahapYigit.Test.Services.AppSettingsService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default ExecutionTraceService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IExecutionTraceService ExecutionTraceService
		{
			get
			{
				const string name = "ExecutionTraceService.Default";
				VahapYigit.Test.Contracts.IExecutionTraceService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IExecutionTraceService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IExecutionTraceService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IExecutionTraceService>(
								name, new VahapYigit.Test.Services.ExecutionTraceService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default ProcessErrorLogService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IProcessErrorLogService ProcessErrorLogService
		{
			get
			{
				const string name = "ProcessErrorLogService.Default";
				VahapYigit.Test.Contracts.IProcessErrorLogService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IProcessErrorLogService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IProcessErrorLogService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IProcessErrorLogService>(
								name, new VahapYigit.Test.Services.ProcessErrorLogService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default ProcessLogService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IProcessLogService ProcessLogService
		{
			get
			{
				const string name = "ProcessLogService.Default";
				VahapYigit.Test.Contracts.IProcessLogService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IProcessLogService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IProcessLogService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IProcessLogService>(
								name, new VahapYigit.Test.Services.ProcessLogService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default RoleService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IRoleService RoleService
		{
			get
			{
				const string name = "RoleService.Default";
				VahapYigit.Test.Contracts.IRoleService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IRoleService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IRoleService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IRoleService>(
								name, new VahapYigit.Test.Services.RoleService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default TranslationService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.ITranslationService TranslationService
		{
			get
			{
				const string name = "TranslationService.Default";
				VahapYigit.Test.Contracts.ITranslationService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.ITranslationService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.ITranslationService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.ITranslationService>(
								name, new VahapYigit.Test.Services.TranslationService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default UserService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IUserService UserService
		{
			get
			{
				const string name = "UserService.Default";
				VahapYigit.Test.Contracts.IUserService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IUserService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IUserService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IUserService>(
								name, new VahapYigit.Test.Services.UserService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default UserRoleService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IUserRoleService UserRoleService
		{
			get
			{
				const string name = "UserRoleService.Default";
				VahapYigit.Test.Contracts.IUserRoleService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IUserRoleService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IUserRoleService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IUserRoleService>(
								name, new VahapYigit.Test.Services.UserRoleService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default CommonService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.ICommonService CommonService
		{
			get
			{
				const string name = "CommonService.Default";
				VahapYigit.Test.Contracts.ICommonService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.ICommonService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.ICommonService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.ICommonService>(
								name, new VahapYigit.Test.Services.CommonService());
						}
					}
				}

				return service;
			}
		}

		/// <summary>
		/// Gets the default AuthenticationService instance.
		/// </summary>
		[DebuggerHidden]
		public static VahapYigit.Test.Contracts.IAuthenticationService AuthenticationService
		{
			get
			{
				const string name = "AuthenticationService.Default";
				VahapYigit.Test.Contracts.IAuthenticationService service = null;

				if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IAuthenticationService>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<VahapYigit.Test.Contracts.IAuthenticationService>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<VahapYigit.Test.Contracts.IAuthenticationService>(
								name, new VahapYigit.Test.Services.AuthenticationService());
						}
					}
				}

				return service;
			}
		}

	}
}