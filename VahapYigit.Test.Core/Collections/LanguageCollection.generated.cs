//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Core
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Data;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;

	[Serializable]
	[DataContract(Namespace = Globals.Namespace)]
	public class LanguageCollection : INotifyPropertyChanged
	{
		#region [ Members ]

		private string _EN;
		/// <summary>
		/// Gets or sets the EN value.
		/// </summary>
		[DataMember]
		public string EN
		{
			get { return _EN; }
			set { SetProperty(ref _EN, value); }
		}

		#endregion

		#region [ Constructors ]

		/// <summary>
		/// Default constructor.
		/// </summary>
		public LanguageCollection()
		{
		}

		/// <summary>
		/// Constructor.
		/// </summary>
		/// 
		/// <param name="defaultValue">
		/// Default value set for each language.
		/// </param>
		public LanguageCollection(string defaultValue)
		{
			this.EN = defaultValue;
		}

		/// <summary>
		/// Constructor by copy.
		/// </summary>
		public LanguageCollection(LanguageCollection source)
		{
			this.EN = source["EN"] != null ? (string)source["EN"].Clone() : null;
		}

		#endregion

		public string this[string culture]
		{
			get
			{
				switch (culture)
				{
					case "EN":
						return this.EN;
				}

				ThrowException.ThrowArgumentException("culture");

				return null; // for compilation only
			}
			set
			{
				switch (culture)
				{
					case "EN":
						this.EN = value;
						break;
					default:
						ThrowException.ThrowArgumentException("culture");
						break;
				}
			}
		}

		public void SetValue(string value)
		{
			this["EN"] = value;
		}

		public void PropagateValue(string culture)
		{
			if (Cultures.IsSupported(culture))
			{
				string value = null;

				switch (culture)
				{
					case "EN":
						value = this.EN;
						break;
				}

				this["EN"] = value;
			}
		}

		public void Format(params object[] args)
		{
			this.EN = string.Format(this.EN, args);
		}

		public string ToString(string culture)
		{
			return Cultures.IsSupported(culture) ? this.ToString() : this[Cultures.Default];
		}

		public override string ToString()
		{
			return this[TranslationHelper.ContextualCulture];
		}

		#region [ INotifyPropertyChanged Implementation ]

		/// <summary>
		/// Event raised on property changed.
		/// </summary>
		[field: NonSerialized()]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Event raised on property changed.
		/// </summary>
		/// <param name="propertyName">Property name.</param>
		protected void NotifyPropertyChanged([CallerMemberName] string propertyName = null)
		{
			PropertyChangedEventHandler handler = PropertyChanged;
			if (handler != null)
			{
				handler(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected bool SetProperty<T>(ref T member, T value, [CallerMemberName] string propertyName = null)
		{
			if (EqualityComparer<T>.Default.Equals(member, value))
			{
				return false;
			}

			member = value;

			this.NotifyPropertyChanged(propertyName);
			return true;
		}

		#endregion
	}

	public static class LanguageCollectionExtensions
	{
		public static bool IsNull(this LanguageCollection source)
		{
			if (source == null)
				return true;

			bool isNull = true;

			isNull &= source.EN == null;

			return isNull;
		}

		public static bool IsNullOrEmpty(this LanguageCollection source)
		{
			if (source == null)
				return true;

			bool isNull = true;

			isNull &= string.IsNullOrEmpty(source.EN);

			return isNull;
		}
	}

	public static class LanguageCollectionHelper
	{
		/// <summary>
		/// Uses the source and the propertyName to extract the differents translations.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader source.
		/// </param>
		/// 
		/// <param name="propertyName">
		/// Name of the property to map.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		/// 
		/// <returns>
		/// A LanguageCollection instance.
		/// </returns>
		public static LanguageCollection Map(IDataReader source, string propertyName, IUserContext userContext = null, string columnPrefix = null)
		{
			LanguageCollection collection = new LanguageCollection();

			collection["EN"] = TypeHelper.To<string>(source[string.Format("{0}{1}_EN", columnPrefix, propertyName)]);

			return collection;
		}

		/// <summary>
		/// Uses the source and the propertyName to extract the differents translations.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow source.
		/// </param>
		/// 
		/// <param name="propertyName">
		/// Name of the property to map.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		/// 
		/// <returns>
		/// A LanguageCollection instance.
		/// </returns>
		public static LanguageCollection Map(DataRow source, string propertyName, IUserContext userContext = null, string columnPrefix = null)
		{
			LanguageCollection collection = new LanguageCollection();

			collection["EN"] = TypeHelper.To<string>(source[string.Format("{0}{1}_EN", columnPrefix, propertyName)]);

			return collection;
		}
	}
}