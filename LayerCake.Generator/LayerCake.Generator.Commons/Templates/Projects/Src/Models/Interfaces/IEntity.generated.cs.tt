<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Models
{
	using System;

	using <#=Context.ProcessorContext.ProjectName#>.Core;

	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	public partial interface I<#=Context.Table.Name#> : IEntity
	{
		#region [ Properties ]

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsIdColumn)
		{
			continue;
		}

#>
		/// <summary>
		/// Gets or sets the <#=column.CSharpPropertyName#> value (<#=(!column.IsNullable) ? "MANDATORY" : "OPTIONAL"#>). <#=(column.Description != null) ? column.Description : ""#>
		/// </summary>
<#

		if (column.IsLanguageColumn)
		{
#>
		<#=Context.ProcessorContext.ProjectName#>.Core.LanguageCollection <#=column.CSharpPropertyName#> { get; set; }

<#
		}
		else
		{
#>
		<#=column.CSharpTypeName#> <#=column.CSharpPropertyName#> { get; set; }

<#
		}
	}
#>

		#endregion
<#
	if (Context.Table.ZeroToOneRelations != null || Context.Table.ZeroToManyRelations != null)
	{
#>

		#region [ References ]

<#
		if (Context.Table.ZeroToOneRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToOneRelations)
			{
#>
		/// <summary>
		/// Referenced <#=relation.CSharpPropertyName#> entity by this entity.
		/// </summary>
		<#=relation.ReferencedTableName#> <#=relation.CSharpPropertyName#> { get; set; }

<#
			}
		}

		if (Context.Table.ZeroToManyRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToManyRelations/*.Where(i => !i.IsLoop) -> commented to support hierarchied-entities */)
			{
#>
		/// <summary>
		/// Referenced <#=relation.CSharpPropertyName#> entity collection by this entity.
		/// </summary>
		TCollection<<#=relation.ReferencedTableName#>> <#=relation.CSharpPropertyName#>Collection { get; set; }

<#
			}
		}
#>
		#endregion
<#
	}
#>
	}
	
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	public static partial class I<#=Context.Table.Name#>Extensions
	{
		public static void MapFrom(this I<#=Context.Table.Name#> target, I<#=Context.Table.Name#> source)
		{
			if (source != null)
			{
				if (target != null)
				{
<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsIdColumn)
		{
			continue;
		}

		if (column.IsLanguageColumn)
		{
#>
					target.<#=column.CSharpPropertyName#> = new LanguageCollection(source.<#=column.CSharpPropertyName#>);
<#
		}
		else
		{
#>
					target.<#=column.CSharpPropertyName#> = source.<#=column.CSharpPropertyName#>;
<#
		}
	}
#>
				}
			}
		}

		public static void MapTo(this I<#=Context.Table.Name#> source, I<#=Context.Table.Name#> target)
		{
			target.MapFrom(source);
		}
	}
}