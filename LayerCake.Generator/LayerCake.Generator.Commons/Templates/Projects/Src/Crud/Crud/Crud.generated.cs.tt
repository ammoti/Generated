<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Crud
{
	using System;
	using System.Collections.Generic;
	using System.Data;
	using System.Data.Common;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Transactions;

	using <#=Context.ProcessorContext.ProjectName#>.Core;

	/// <summary>
	/// <#=Context.Table.Name#>Crud class used to access to the database using stored procedures.
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public partial class <#=Context.Table.Name#>Crud : CrudBase<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>>
	{
		#region [ Constructor ]

		/// <summary>
		/// Constructor.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		public <#=Context.Table.Name#>Crud(IUserContext userContext)
			: base(userContext)
		{
			base.Initialize();
		}

		#endregion

		#region [ Public methods ]
		
		/// <summary>
		/// Refreshs the entity instance from the database.
		/// </summary>
		/// 
		/// <param name="appSettings">
		/// Entity to refresh (must be in database).
		/// </param>
		public override void Refresh(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity)
		{
			ConditionChecker.Required(
				entity != null,
				new ArgumentNullException("entity"));

			long id = entity.Id;

			entity = this.GetById(id);
			if (entity == null)
			{
				throw new EntityNotFoundException(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.EntityName, id);
			}
		}
		
		/// <summary>
		/// Gets an entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
		public override <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetById(long id)
		{
			using (var et = new ExecutionTracerService())
			{
				<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity = null;

				var parameters = new Dictionary<string, object>();

				parameters.Add("@<#=Context.Table.Name#>_Id", id);
<#
	if (Context.Table.Name == Context.ProcessorContext.AuthenticationSupport.UserTableName)
	{
#>
				parameters.Add("@<#=Context.ProcessorContext.AuthenticationSupport.UserTableIdentifiedColumnName#>", DBNull.Value);
<#
	}
#>

				var collection = base.ToEntityCollection("<#=Context.Table.Name#>_Get", parameters, withDeepMapping: false);
				if (!collection.IsNullOrEmpty())
				{
					entity = collection[0];
				}

				return entity;
			}
		}
<#
	if (Context.Table.Name == Context.ProcessorContext.AuthenticationSupport.UserTableName)
	{
		string identifier = Context.ProcessorContext.AuthenticationSupport.UserTableIdentifiedColumnName;
		string identifierLc = identifier.Substring(Context.ProcessorContext.AuthenticationSupport.UserTableName.Length + 1);

		identifierLc = ToMemberName(identifierLc);
#>

		/// <summary>
		/// Gets an entity given its <#=identifierLc#> value.
		/// </summary>
		/// 
		/// <param name="<#=identifierLc#>">
		/// Unique <#=identifierLc#> value.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
		public <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetByIdentifier(string <#=identifierLc#>)
		{
			using (var et = new ExecutionTracerService())
			{
				<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity = null;

				var parameters = new Dictionary<string, object>();

				parameters.Add("@<#=Context.Table.Name#>_Id", DBNull.Value);
				parameters.Add("@<#=Context.ProcessorContext.AuthenticationSupport.UserTableIdentifiedColumnName#>", <#=identifierLc#>);

				var collection = base.ToEntityCollection("<#=Context.Table.Name#>_Get", parameters, withDeepMapping: false);
				if (!collection.IsNullOrEmpty())
				{
					entity = collection[0];
				}

				return entity;
			}
		}
<#
	}

	if (Context.Table.HasIdUserColumn)
	{
#>

		/// <summary>
		/// Gets all the <#=Context.Table.Name#> entities associated to a given <#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.
		/// </summary>
		/// 
		/// <param name="id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>">
		/// Unique ID of the <#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.
		/// </param>
		/// 
		/// <returns>
		/// A collection of <#=Context.Table.Name#> entities.
		/// </returns>
		public TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> GetById<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>(long id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>)
		{
			var options = new SearchOptions();
			options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.Id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>, FilterOperator.Equals, id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>);

			return this.Search(ref options);
		}
<#
	}
	
	if (Context.Table.HasCodeRefColumn)
	{
#>

		/// <summary>
		/// Gets an entity given its unique CodeRef value.
		/// </summary>
		/// 
		/// <param name="codeRef">
		/// Unique CodeRef value.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
		public <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetByCodeRef(string codeRef)
		{
			<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity = null;

			using (var et = new ExecutionTracerService())
			{
				var options = new SearchOptions();

				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.CodeRef, FilterOperator.Equals, codeRef.ToString());
				options.MaxRecords = 1;

				var collection = this.Search(ref options);
				if (!collection.IsNullOrEmpty())
				{
					entity = collection[0];
				}
			}
			
			return entity;
		}
<#
	}
#>

		/// <summary>
		/// Searchs entities with search options.
		/// </summary>
		/// 
		/// <param name="options">
		/// Optional options, filters, orderby, paging, etc.
		/// </param>
		/// 
		/// <returns>
		/// A collection of entities.
		/// </returns>
		public override TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> Search(ref SearchOptions options)
		{
			TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> collection = null;
			
			using (var et = new ExecutionTracerService())
			{
				if (options == null)
				{
					options = new SearchOptions();
				}

				var parameters = new Dictionary<string, object>();

				if (!options.Filters.IsNullOrEmpty())
				{
					parameters.Add("Filter", options.Filters.ToSql());
				}

				if (!options.Orders.IsNullOrEmpty())
				{
					parameters.Add("OrderBy", options.Orders.ToSql());
				}

				int maxRecords = int.MaxValue;
				if (options.MaxRecords != 0)
				{
					maxRecords = (options.MaxRecords < 0) ? 0 : options.MaxRecords;
				}

				parameters.Add("MaxRecords", maxRecords);

				parameters.Add("CtxWithPaging", options.WithPaging);
				parameters.Add("CtxPagingCurrentPage", options.PagingOptions.CurrentPage);
				parameters.Add("CtxPagingRecordsPerPage", options.PagingOptions.RecordsPerPage);

				DbConnection dbConnection;

				using (var dbReader = this.ToDataReader("<#=Context.Table.Name#>_Search", parameters, out dbConnection))
				{
					collection = this.Map(dbReader);

					dbReader.NextResult();
					dbReader.Read();

					options.PagingOptions.TotalRecords = TypeHelper.To<int>(dbReader[0]);
				}

				if (dbConnection != null)
					dbConnection.Close();
			}

			return collection;
		}

		/// <summary>
		/// Gets the number of records that verify the search options.
		/// </summary>
		/// 
		/// <param name="options">
		/// Optional search options. If not defined all records are counted.
		/// </param>
		/// 
		/// <returns>
		/// The number of records.
		/// </returns>
		public override int Count(SearchOptions options = null)
		{
			using (var et = new ExecutionTracerService())
			{
				if (options == null)
				{
					options = new SearchOptions();
				}

				var parameters = new Dictionary<string, object>();

				if (!options.Filters.IsNullOrEmpty())
				{
					parameters.Add("Filter", options.Filters.ToSql());
				}

				return base.ExecuteScalar<int>("<#=Context.Table.Name#>_Count", parameters);
			}
		}
		
		/// <summary>
		/// Saves (or updates) the entity in the database.
		/// </summary>
		///
		/// <param name="entity">
		/// Entity to save or update.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public override int Save(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, SaveOptions options = null)
		{
			ConditionChecker.Required(
				entity != null,
				new ArgumentNullException("entity"));

<#
	if (Context.Table.IsOwnership)
	{
#>
			if (entity.IsLocked)
			{
				return 0;
			}

<#
	}
#>
			if (options == null)
			{
				options = SaveOptions.Default;
			}

			int rowCount = 0;

			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				this.OnSaving(ref entity, options);

				if (options.SaveChildren)
				{
					rowCount = this.PersistWithChildren(ref entity, new ObjectIDGenerator(), options);
				}
				else
				{
					rowCount = this.Persist(ref entity, options);
				}
				
				this.OnSaved(ref entity, options);

				scope.Complete();
			}

			return rowCount;
		}
		
		/// <summary>
		/// Saves or updates the entity without its children.
		/// </summary>
		/// 
		/// <param name="entity">
		/// Entity to save or update.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		private int Persist(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, SaveOptions options = null)
		{
			if (entity.State !=<#=Context.ProcessorContext.ProjectName#>.Models.EntityState.ToInsert && 
				entity.State !=<#=Context.ProcessorContext.ProjectName#>.Models.EntityState.ToUpdate)
			{
				return 0;
			}

			IList<TranslationEnum> errors;
			if (!entity.IsValid(out errors))
			{
				throw new EntityValidationException(errors);
			}

			int rowCount = 0;

			using (var et = new ExecutionTracerService(tag: entity.State.ToString()))
			{
<#
	if (Context.Table.Constraints != null)
	{
#>
				if (options.CheckUniqueConstraints)
				{
					IList<TranslationEnum> ucErrors = new List<TranslationEnum>();
					SearchOptions searchOpts = new SearchOptions();
<#
		foreach (var constraint in Context.Table.Constraints)
		{
#>

					searchOpts.Clear();

					if (entity.State ==<#=Context.ProcessorContext.ProjectName#>.Models.EntityState.ToUpdate)
					{
						searchOpts.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.Id, FilterOperator.Different, entity.Id);
					}

<#
			string idTranslationSuffix = null;
			foreach (var column in constraint.Columns)
			{
				if (idTranslationSuffix == null) { idTranslationSuffix = column.NameWithoutTableName; }
				else { idTranslationSuffix = string.Format("{0}_{1}", idTranslationSuffix, column.NameWithoutTableName); }

				if (column.NameWithoutCulture != null) // LanguageColumn
				{
#>
					searchOpts.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.NameWithoutTableName#>, FilterOperator.Equals, entity.<#=column.NameWithoutTableNameWithoutCulture#>.<#=column.Culture#>);
<#
				}
				else
				{
#>
					searchOpts.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.NameWithoutTableName#>, FilterOperator.Equals, entity.<#=column.NameWithoutTableName#>);
<#
				}
			}
#>

					if (this.HasResult(searchOpts))
					{
						ucErrors.Add(TranslationEnum.Crud<#=Context.Table.Name#><#=idTranslationSuffix#>UniqueConstraint);
					}
<#
		}
#>

					if (ucErrors.Count != 0)
					{
						throw new EntityValidationException(ucErrors);
					}
				}

<#
	}
#>
				var parameters = new Dictionary<string, object>();

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsOwnershipColumn)
		{
			continue;
		}

		if (column.IsLanguageColumn)
		{
			foreach (string culture in Context.ProcessorContext.Culture.SupportedCultures)
			{
#>
				parameters.Add("@<#=column.Name#>_<#=culture#>", entity.<#=column.CSharpPropertyName#>["<#=culture#>"]);
<#
			}
		}
		else
		{
#>
				parameters.Add("@<#=column.Name#>", entity.<#=column.CSharpPropertyName#>);
<#
		}
	}
#>

				var collection = base.ToEntityCollection("<#=Context.Table.Name#>_Save", parameters, withDeepMapping: false);
				if (!collection.IsNullOrEmpty())
				{
					entity.Map(collection[0]);
					rowCount = 1;
				}

				return rowCount;
			}
		}
		
		/// <summary>
		/// Saves or updates the entity without its children.
		/// </summary>
		/// 
		/// <param name="entity">
		/// Entity to save or update.
		/// </param>
		/// 
		/// <param name="idGenerator">
		/// ObjectIDGenerator instance to generate IDs for objects.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		internal int PersistWithChildren(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, ObjectIDGenerator idGenerator, SaveOptions options = null)
		{
			int rowCount = 0;
<#
		if (Context.Table.ZeroToOneRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToOneRelations)
			{
#>

			if (entity.<#=relation.CSharpPropertyName#> != null && idGenerator.HasId(entity.<#=relation.CSharpPropertyName#>, withForceId: true) == 0)
			{
				using (var  db = new <#=relation.ReferencedTableName#>Crud(base.UserContext))
				{
					var child = entity.<#=relation.CSharpPropertyName#>;

					rowCount += db.PersistWithChildren(ref child, idGenerator, options);

					entity.Id<#=relation.CSharpPropertyName#> = child.Id;
				}
			}
<#
			}
		}
#>

			rowCount += this.Persist(ref entity, options);
<#
		if (Context.Table.ZeroToManyRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
			{
				var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.ReferencedTableName, relation.TableName), "");
#>

			using (var  db = new <#=relation.ReferencedTableName#>Crud(base.UserContext))
			{
				for (int i = 0; i < entity.<#=relation.CSharpPropertyName#>Collection.Count; i++)
				{
					var child = entity.<#=relation.CSharpPropertyName#>Collection[i];
					child.Id<#=relation.TableName#><#=suffix#> = entity.Id;

					rowCount += db.PersistWithChildren(ref child, idGenerator, options);
				}
			}
<#
			}
		}
#>

			return rowCount;
		}
		
		/// <summary>
		/// Deletes the entity from the database.
		/// </summary>
		/// 
		/// <param name="entity">
		/// Entity to delete.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public override int Delete(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity)
		{
			int rowCount = 0;

<#
	if (Context.Table.IsOwnership)
	{
#>
			if (entity != null && !entity.IsLocked)
<#
	}
	else
	{
#>
			if (entity != null)
<#
	}
#>
			{
				rowCount = this.Delete(entity.Id);
				if (rowCount > 0)
				{				
					entity.Id = 0;
					entity.State =<#=Context.ProcessorContext.ProjectName#>.Models.EntityState.Deleted;
				}
			}

			return rowCount;
		}

		/// <summary>
		/// Deletes the entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public override int Delete(long id)
		{
			int rowCount = 0;

			using (var et = new ExecutionTracerService())
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				this.OnDeleting(id);

				var parameters = new Dictionary<string, object>();

				parameters.Add("@<#=Context.Table.Name#>_Id", id);

				rowCount = base.ExecuteScalar<int>("<#=Context.Table.Name#>_Delete", parameters);

				this.OnDeleted(id);

				scope.Complete();
			}

			return rowCount;
		}
<#
	if (Context.Table.IsOwnership)
	{
#>

		/// <summary>
		/// Sets the Lock status (IsLocked field). A locked entity cannot be neither modified nor deleted on database-side.
		/// </summary>
		/// 
		/// <param name="entity">
		/// Entity to lock or unlock.
		/// </param>
		/// 
		/// <param name="isLocked">
		/// Lock status to set.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public int SetLock(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, bool isLocked)
		{
			int rowCount = 0;

			using (var et = new ExecutionTracerService())
			{
				var parameters = new Dictionary<string, object>();

				parameters.Add("@<#=Context.Table.Name#>_Id", entity.Id);
				parameters.Add("@<#=Context.Table.Name#>_IsLocked", isLocked);

				var collection = base.ToEntityCollection("<#=Context.Table.Name#>_SetLock", parameters, withDeepMapping: false);
				if (!collection.IsNullOrEmpty())
				{
					entity = collection[0];
					rowCount = 1;
				}
			}

			return rowCount;
		}
<#
	}

	if (Context.Table.ZeroToOneRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToOneRelations)
		{
			var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.TableName, relation.ReferencedTableName), "");
#>

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entity associated to the current instance (entity.<#=relation.CSharpPropertyName#> property).
		/// </summary>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
		public void Load<#=relation.CSharpPropertyName#>(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity)
		{
			if (entity != null)
			{
				var options = new SearchOptions();
				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=relation.ReferencedTableName#>.ColumnNames.Id, FilterOperator.Equals, entity.Id<#=relation.CSharpPropertyName#>);

				using (var  db = new <#=relation.ReferencedTableName#>Crud(base.UserContext))
				{
					var collection = db.Search(ref options);
					if (collection.Count == 1)
					{
						entity.<#=relation.CSharpPropertyName#> = collection[0];
<#
			if (!relation.IsLoop)
			{
#>
						entity.<#=relation.CSharpPropertyName#>.<#=relation.TableName#><#=suffix#>Collection.Add(entity);
<#
			}
#>
					}
				}
			}
		}
<#
		}
	}

	if (Context.Table.ZeroToManyRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
		{
			var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.ReferencedTableName, relation.TableName), "");
#>

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entities associated to the current instance (entity.<#=relation.CSharpPropertyName#> collection property).
		/// </summary>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
		public void Load<#=relation.CSharpPropertyName#>Collection(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity)
		{
			if (entity != null && entity.IsInDb)
			{
				var options = new SearchOptions();
				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=relation.ReferencedTableName#>.ColumnNames.Id<#=relation.TableName#><#=suffix#>, FilterOperator.Equals, entity.Id);

				using (var  db = new <#=relation.ReferencedTableName#>Crud(base.UserContext))
				{
					entity.<#=relation.CSharpPropertyName#>Collection = db.Search(ref options);
				}

				foreach (var item in entity.<#=relation.CSharpPropertyName#>Collection)
				{
					item.<#=relation.TableName#><#=suffix#> = entity;
				}
			}
		}

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entities associated to the instances (entity.<#=relation.CSharpPropertyName#> collection property).
		/// </summary>
		/// 
		/// <param name="entities">
		/// The target entity collection.
		/// </param>
		public void Load<#=relation.CSharpPropertyName#>Collection(TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> entities)
		{
			if (entities != null)
			{
				var collection = entities.Where(i => i.IsInDb).ToTCollection();
				var idList = collection.Select(i => i.Id).ToList();

				var options = new SearchOptions();
				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=relation.ReferencedTableName#>.ColumnNames.Id<#=relation.TableName#><#=suffix#>, FilterOperator.In, idList);

				using (var  db = new <#=relation.ReferencedTableName#>Crud(base.UserContext))
				{
					var data = db.Search(ref options);
					foreach (var entity in collection)
					{
						entity.<#=relation.CSharpPropertyName#>Collection = data.Where(i => i.Id<#=relation.TableName#><#=suffix#> == entity.Id).ToTCollection();
					}

					foreach (var item in data)
					{
						item.<#=relation.TableName#><#=suffix#> = collection.First(i => i.Id == item.Id<#=relation.TableName#><#=suffix#>);
					}
				}
			}
		}
<#
		}
	}
#>

		/// <summary>
		/// Converts an IDataReader to a TCollection WITHOUT associated children (linked entities).
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader source.
		/// </param>
		/// 
		/// <returns>
		/// A collection.
		/// </returns>
		protected override TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> Map(IDataReader dbReader)
		{
			var collection = new TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>>();

			while (dbReader.Read())
			{
				var entity = new <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>();
				entity.Map(dbReader, base.UserContext);

				var current<#=Context.Table.Name#> = collection.FirstOrDefault(i => i.Id == entity.Id);
				if (current<#=Context.Table.Name#> == null)
				{
					collection.Add(entity);
					current<#=Context.Table.Name#> = entity;
				}
<#
	WriteDeepMappingZeroManyRelationBlock(Context.Table.Name, 4);
#>
			}

			return collection;
		}
		
		/// <summary>
		/// Converts an DataTable to a TCollection WITHOUT associated children (linked entities).
		/// </summary>
		/// 
		/// <param name="source">
		/// DataTable source.
		/// </param>
		/// 
		/// <returns>
		/// A collection.
		/// </returns>
		protected override TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> Map(DataTable source)
		{
			var collection = new TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>>();

			foreach (DataRow row in source.Rows)
			{
				var entity = new <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>();
				entity.Map(row, base.UserContext);

				var current<#=Context.Table.Name#> = collection.FirstOrDefault(i => i.Id == entity.Id);
				if (current<#=Context.Table.Name#> == null)
				{
					collection.Add(entity);
					current<#=Context.Table.Name#> = entity;
				}
<#
	WriteDeepMappingZeroManyRelationBlock(Context.Table.Name, 4);
#>
			}

			return collection;
		}
		
		/// <summary>
		/// Converts an IDataReader to a TCollection WITH possible associated children (linked entities).
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader source.
		///</param>
		/// 
		/// <returns>
		/// A collection.
		/// </returns>
		protected override TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> DeepMap(IDataReader dbReader)
		{
			var collection = new TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>>();

			while (dbReader.Read())
			{
				var entity = new <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>();
				entity.DeepMap(dbReader, base.UserContext);

				var current<#=Context.Table.Name#> = collection.FirstOrDefault(i => i.Id == entity.Id);
				if (current<#=Context.Table.Name#> == null)
				{
					collection.Add(entity);
					current<#=Context.Table.Name#> = entity;
				}
<#
	WriteDeepMappingZeroManyRelationBlock(Context.Table.Name, 4);
#>
			}

			return collection;
		}
		
		/// <summary>
		/// Converts an DataTable to a TCollection WITH possible associated children (linked entities).
		/// </summary>
		/// 
		/// <param name="source">
		/// DataTable source.
		/// </param>
		/// 
		/// <returns>
		/// A collection.
		/// </returns>
		protected override TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> DeepMap(DataTable source)
		{
			var collection = new TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>>();

			foreach (DataRow row in source.Rows)
			{
				var entity = new <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>();
				entity.DeepMap(row, base.UserContext);

				var current<#=Context.Table.Name#> = collection.FirstOrDefault(i => i.Id == entity.Id);
				if (current<#=Context.Table.Name#> == null)
				{
					collection.Add(entity);
					current<#=Context.Table.Name#> = entity;
				}
<#
	WriteDeepMappingZeroManyRelationBlock(Context.Table.Name, 4);
#>
			}

			return collection;
		}

		#endregion

		#region [ Partial methods ]

		partial void OnSaving(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, SaveOptions options);
		partial void OnSaved(ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, SaveOptions option);

		partial void OnDeleting(long id);
		partial void OnDeleted(long id);

		#endregion
	}
}
<#+
	void WriteDeepMappingZeroManyRelationBlock(string tableName, int tabNumber)
	{
		if (Context.Table.ZeroToManyRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
			{
				this.WriteLine("");
				WriteIndentLine(tabNumber, "// {0}Collection (-> {1})...", relation.CSharpPropertyName, tableName);

				WriteIndentLine(tabNumber, "foreach (var child in entity.{1}Collection)", relation.ReferencedTableName, relation.CSharpPropertyName);
				WriteIndentLine(tabNumber, "{");
				WriteIndentLine(tabNumber + 1, "var e = current{0}.{1}Collection.FirstOrDefault(i => i.Id == child.Id);", tableName, relation.CSharpPropertyName);
				WriteIndentLine(tabNumber + 1, "if (e == null)");
				WriteIndentLine(tabNumber + 1, "{");
				WriteIndentLine(tabNumber + 2, "current{0}.{1}Collection.Add(child);", tableName, relation.CSharpPropertyName);
				WriteIndentLine(tabNumber + 2, "e = child;");
				WriteIndentLine(tabNumber + 1, "}");

				WriteIndentLine(tabNumber, "}");
			}
		}
	}
#>