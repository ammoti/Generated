//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Models
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Data;
	using System.Diagnostics;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Xml.Serialization;

	using VahapYigit.Test.Core;

	/// <summary>
	/// Entity mapped to Translation DB table.
	/// </summary>
	[Serializable]
	[DataContract(Namespace = Globals.Namespace, IsReference = true)]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public partial class Translation : EntityBase, ITranslation
	{
		/// <summary>
		/// Gets the name of the entity.
		/// </summary>
		public static readonly string EntityName = "Translation";

		#region [ Constructor ]

		/// <summary>
		/// Default constructor.
		/// </summary>
		public Translation()
			: base()
		{
			this.Initialize();

			this.Value.PropertyChangedAddHandler(this.OnValuePropertyChanged); // To be notified that something has changed in the Value property
		}

		#endregion

		#region [ Events ]

		private void OnValuePropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (!_deserializing)
			{
				base.UpdateState();
				base.NotifyPropertyChanged("Value"); // Notify that Value property has changed (EN, FR, etc)
			}
		}

		#endregion

		#region [ Column Names ]

		/// <summary>
		/// Contains the entity column names.
		/// </summary>
		public static partial class ColumnNames
		{
			/// <summary>
			/// Name of the Id column ("Translation_Id").
			/// </summary>
			public static readonly string Id = "Translation_Id";

			/// <summary>
			/// Name of the Key column ("Translation_Key").
			/// </summary>
			public static readonly string Key = "Translation_Key";

			/// <summary>
			/// Name of the Value column ("Translation_Value").
			/// </summary>
			public static readonly string Value = "Translation_Value";

			/// <summary>
			/// Name of the Value_EN column ("Translation_Value_EN").
			/// </summary>
			public static readonly string Value_EN = "Translation_Value_EN";

		}

		#endregion

		#region [ Property Names ]

		/// <summary>
		/// Contains the entity property names.
		/// </summary>
		public static partial class PropertyNames
		{
			/// <summary>
			/// Name of the Id property ("Id").
			/// </summary>
			public static readonly string Id = "Id";

			/// <summary>
			/// Name of the Key property ("Key").
			/// </summary>
			public static readonly string Key = "Key";

			/// <summary>
			/// Name of the Value property ("Value").
			/// </summary>
			public static readonly string Value = "Value";

			/// <summary>
			/// Name of the Value_EN property ("Value_EN").
			/// </summary>
			public static readonly string Value_EN = "Value_EN";

		}

		#endregion

		#region [ Properties ]

		#region [ Key ]

		private string _Key;

		/// <summary>
		/// Gets or sets the Key value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string Key
		{
			get { return _Key; }
			set
			{
				if (value != _Key)
				{
					_Key = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateKey();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Key value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Key value is valid (format, value, etc).
		/// </param>
		partial void OnKeyValidation(ref TranslationEnum? error);

		private bool ValidateKey()
		{
			bool isValid = false;

			do
			{
				if (this.Key == null)
				{
					base.AddValidationError("Key", TranslationEnum.ModelTranslationKeyIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnKeyValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Key", error.Value);
					break;
				}

				base.RemoveValidationErrors("Key");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ Value ]

		private LanguageCollection _Value = new LanguageCollection()
		{
			EN = null
		};

		/// <summary>
		/// Gets or sets the Value value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual LanguageCollection Value
		{
			get { return _Value; }
			set
			{
				if (value != _Value)
				{
					if (_Value != null)
					{
						this.Value.PropertyChanged -= OnValuePropertyChanged;
					}

					_Value = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.Value.PropertyChanged += OnValuePropertyChanged;
					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateValue();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Value value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Value value is valid (format, value, etc).
		/// </param>
		partial void OnValueValidation(ref TranslationEnum? error);

		private bool ValidateValue()
		{
			bool isValid = false;

			do
			{
				if (this.Value.EN == null)
				{
					base.AddValidationError("Value", TranslationEnum.ModelTranslationValueIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnValueValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Value", error.Value);
					break;
				}

				base.RemoveValidationErrors("Value");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#endregion

		#region [ References ]

		#endregion

		#region [ EntityBase Implementation ]

		/// <summary>
		/// Gets the entity properties validity.
		/// </summary>
		/// 
		/// <param name="errors">
		/// Translation errors list (each item represents a translation key of an error).
		/// </param>
		/// 
		/// <returns>
		/// True if all the entity properties are correct; otherwise, false.
		/// </returns>
		public override bool IsValid(out IList<TranslationEnum> errors)
		{
			IList<TranslationEnum> errs = new List<TranslationEnum>();

			if (!this.ValidateKey())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Key");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateValue())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Value");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			errors = errs;

			return errors.Count == 0;
		}
		
		/// <summary>
		/// Fill the entity properties using a source.
		/// </summary>
		/// 
		/// <param name="source">
		/// Source.
		public override void Map(EntityBase source)
		{
			if (source == null)
			{
				ThrowException.ThrowArgumentNullException("source");
			}

			if (!(source is Translation))
			{
				ThrowException.ThrowArgumentException("The 'source' argument is not a 'Translation' instance");
			}

			this.Key = ((Translation)source).Key;
			this.Value = new LanguageCollection(((Translation)source).Value);

			this.Id = source.Id;
			this.State = source.State;
		}

		/// <summary>
		/// Fills the entity properties using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(IDataReader source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.Key = TypeHelper.To<string>(source[string.Format("{0}Key", columnPrefix)]);
			this.Value = LanguageCollectionHelper.Map(source, "Value", userContext, columnPrefix);

			this.State = EntityState.None;
		}

		/// <summary>
		/// Fill the entity properties using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(DataRow source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.Key = TypeHelper.To<string>(source[string.Format("{0}Key", columnPrefix)]);
			this.Value = LanguageCollectionHelper.Map(source, "Value", userContext, columnPrefix);

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fills the entity properties and all its dependencies using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(IDataReader source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fill the entity properties and all its dependencies using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(DataRow source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			this.State = EntityState.None;
		}

		protected override void OnPostDeserialized()
		{
			this.Value.PropertyChanged += OnValuePropertyChanged;
		}
		#endregion
	}
}