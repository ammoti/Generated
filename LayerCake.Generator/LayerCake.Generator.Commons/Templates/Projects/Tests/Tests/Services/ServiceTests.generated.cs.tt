<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Tests
{
	using System;
	using System.Collections.Generic;
	using System.Transactions;

	using Microsoft.VisualStudio.TestTools.UnitTesting;
	
	using <#=Context.ProcessorContext.ProjectName#>.Core;
	using <#=Context.ProcessorContext.ProjectName#>.Models;
	using <#=Context.ProcessorContext.ProjectName#>.Services;

	[TestClass]
	public partial class Service_<#=Context.Table.Name#>ServiceTests : UnitTestBase
	{
		[TestInitialize]
		public void Initialize()
		{
<#
	if (Context.Table.IsOwnership)
	{
#>
			base.UserContext = new ClientContext(1, "user_jdoe", "pass_jdoe");
<#
	}
#>
		}

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_Refresh()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var dbEntity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref dbEntity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref dbEntity);
<#
	}
#>
				
				var entity = new <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>();
				entity.Id = dbEntity.Id;

				service.Refresh(base.UserContext, ref entity);

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsLanguageColumn)
		{
			for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
			{
#>
				Assert.IsTrue(entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"] == dbEntity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"]);
<#
			}
		}
		else
		{
#>
				Assert.IsTrue(entity.<#=column.CSharpPropertyName#> == dbEntity.<#=column.CSharpPropertyName#>);
<#
		}
	}
#>
			}
		}
		
		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_GetById()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>
				
				var dbEntity = service.GetById(base.UserContext, entity.Id);

				Assert.IsNotNull(dbEntity);

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsLanguageColumn)
		{
			for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
			{
#>
				Assert.IsTrue(entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"] == dbEntity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"]);
<#
			}
		}
		else
		{
#>
				Assert.IsTrue(dbEntity.<#=column.CSharpPropertyName#> == entity.<#=column.CSharpPropertyName#>);
<#
		}
	}
#>
			}
		}
<#

	if (Context.Table.Name == Context.ProcessorContext.AuthenticationSupport.UserTableName)
	{
#>

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_GetByIdentifier()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>
				
				var dbEntity = service.GetByIdentifier(base.UserContext, entity.<#=Context.ProcessorContext.AuthenticationSupport.UserTableIdentifiedColumnName.Substring(Context.ProcessorContext.AuthenticationSupport.UserTableName.Length + 1)#>);

				Assert.IsNotNull(dbEntity);

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsLanguageColumn)
		{
			for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
			{
#>
				Assert.IsTrue(dbEntity.<#=column.CSharpPropertyName#>.<#=Context.ProcessorContext.Culture.SupportedCultures[i]#> == entity.<#=column.CSharpPropertyName#>.<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>);
<#
			}
		}
		else
		{
#>
				Assert.IsTrue(dbEntity.<#=column.CSharpPropertyName#> == entity.<#=column.CSharpPropertyName#>);
<#
		}
	}
#>
			}
		}
<#
	}

	if (Context.Table.HasIdUserColumn)
	{
#>

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_GetById<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var e = Models_<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>ModelTests.Create<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>();

				var service = new <#=Context.Table.Name#>Service();
				<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>Service service<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#> = new <#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>Service();
<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.Save(base.UserContext, ref e, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.Save(base.UserContext, ref e);
<#
	}
#>

				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();
				entity.Id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#> = e.Id;
				
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });

				Assert.IsTrue(service.GetById<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>(base.UserContext, e.Id) != null);
			}
		}
<#
	}
	
	if (Context.Table.HasCodeRefColumn)
	{
#>

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_GetByCodeRef()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var options = new SearchOptions();

				var service = new <#=Context.Table.Name#>Service();
				
				var collection = service.Search(base.UserContext, ref options);
				if (!collection.IsNullOrEmpty())
				{
					var entity = service.GetByCodeRef(base.UserContext, collection[0].CodeRef);
					Assert.IsNotNull(entity);
				}
			}
		}
<#
	}
#>
		
		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_Search()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>

				var options = new SearchOptions();

				var collection = service.Search(base.UserContext, ref options);
				Assert.IsTrue(!collection.IsNullOrEmpty());

				#region [ Search... ]

				options.Clear();

<#
	foreach (var column in Context.Table.Columns.Where(c => c.SqlTypeName != "TEXT")) // No search on TEXT type
	{
#>
				#region [ <#=column.CSharpPropertyName#> ]

<#
		if (column.IsLanguageColumn)
		{
			for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
			{
#>
				options.Clear();

				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.CSharpPropertyName#>_<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>, FilterOperator.Equals, entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"]);
				collection = service.Search(base.UserContext, ref options);

				Assert.IsTrue(!collection.IsNullOrEmpty());

<#
			}
		}
		else
		{
#>
				options.Clear();

				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.CSharpPropertyName#>, FilterOperator.Equals, entity.<#=column.CSharpPropertyName#>);
				collection = service.Search(base.UserContext, ref options);

				Assert.IsTrue(!collection.IsNullOrEmpty());

<#
		}
#>
				#endregion

<#
	}
#>
				#endregion
			}
		}
		
		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_Count()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>

				Assert.IsTrue(service.Count(base.UserContext) != 0);

				#region [ Count... ]

				var options = new SearchOptions();

<#
	foreach (var column in Context.Table.Columns.Where(c => c.SqlTypeName != "TEXT")) // No search on TEXT type
	{
#>
				#region [ <#=column.CSharpPropertyName#> ]

<#
		if (column.IsLanguageColumn)
		{
			for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
			{
#>
				options.Clear();

				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.CSharpPropertyName#>_<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>, FilterOperator.Equals, entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"]);
				Assert.IsTrue(service.Count(base.UserContext, options) != 0);

<#
			}
		}
		else
		{
#>
				options.Clear();

				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.CSharpPropertyName#>, FilterOperator.Equals, entity.<#=column.CSharpPropertyName#>);
				Assert.IsTrue(service.Count(base.UserContext, options) != 0);

<#
		}
#>
				#endregion

<#
	}
#>

				#endregion
			}
		}
		
		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_HasResult()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>

				Assert.IsTrue(service.HasResult(base.UserContext));

				#region [ HasResult... ]

				var options = new SearchOptions();

<#
	foreach (var column in Context.Table.Columns.Where(c => c.SqlTypeName != "TEXT")) // No search on TEXT type
	{
#>
				#region [ <#=column.CSharpPropertyName#> ]

<#
		if (column.IsLanguageColumn)
		{
			for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
			{
#>
				options.Clear();

				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.CSharpPropertyName#>_<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>, FilterOperator.Equals, entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"]);
				Assert.IsTrue(service.HasResult(base.UserContext, options));

<#
			}
		}
		else
		{
#>
				options.Clear();

				options.Filters.Add(<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>.ColumnNames.<#=column.CSharpPropertyName#>, FilterOperator.Equals, entity.<#=column.CSharpPropertyName#>);
				Assert.IsTrue(service.HasResult(base.UserContext, options));

<#
		}
#>
				#endregion

<#
	}
#>

				#endregion
			}
		}
		
		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_Save()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				Assert.IsTrue(entity.Id == 0);
				Assert.IsFalse(entity.IsInDb);
				Assert.IsTrue(entity.State == EntityState.ToInsert);

				var service = new <#=Context.Table.Name#>Service();

				// Save...

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>

				Assert.IsTrue(entity.Id != 0);
				Assert.IsTrue(entity.IsInDb);
				Assert.IsTrue(entity.State == EntityState.None);
<#
	if (Context.Table.IsOwnership)
	{
#>
				Assert.IsTrue(entity.CreatedBy == base.UserContext.Id);
				Assert.IsNotNull(entity.CreatedOn);
				Assert.IsTrue(entity.ModifiedBy == base.UserContext.Id);
				Assert.IsNotNull(entity.ModifiedOn);
				Assert.IsTrue(entity.Owner == base.UserContext.Id);
				Assert.IsFalse(entity.IsLocked);
<#
	}

	IList<ModelDescriptorSchemaTableColumn> columnToUpdateList = new List<ModelDescriptorSchemaTableColumn>();
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsIdColumn || column.IsOwnershipColumn)
		{
			continue;
		}

		if (column.IsForeignKey)
		{
			continue;
		}

		columnToUpdateList.Add(column);
	}

	if (columnToUpdateList.Count != 0)
	{
#>

				// Update...

<#
		foreach (var column in columnToUpdateList)
		{
			if (column.IsLanguageColumn)
			{
				for (int i = 0; i < Context.ProcessorContext.Culture.SupportedCultures.Length; i++)
				{
#>
				entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"] = (<#=column.CSharpTypeName#>)RandomHelper.GetNewValue(typeof(<#=column.CSharpTypeName#>), entity.<#=column.CSharpPropertyName#>["<#=Context.ProcessorContext.Culture.SupportedCultures[i]#>"]);
<#
				}
			}
			else
			{
#>
				entity.<#=column.CSharpPropertyName#> = (<#=column.CSharpTypeName#>)RandomHelper.GetNewValue(typeof(<#=column.CSharpTypeName#>), entity.<#=column.CSharpPropertyName#>);
<#
			}
		}
#>

				Models_<#=Context.Table.Name#>ModelTests.InitializeInstance(entity);
				
				IList<TranslationEnum> errors;
				Assert.IsTrue(entity.IsValid(out errors));

				Assert.IsTrue(entity.State == EntityState.ToUpdate);

<#
		if (Context.Table.Columns.Any(c => c.ForeignKey != null))
		{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
		}
		else
		{
#>
				service.Save(base.UserContext, ref entity);
<#
		}
#>

				Assert.IsTrue(entity.Id != 0);
				Assert.IsTrue(entity.IsInDb);
				Assert.IsTrue(entity.State == EntityState.None);
<#
	}
#>
			}
		}
		
		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_Delete()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>
				
				service.Delete(base.UserContext, entity.Id);

				Assert.IsNull(service.GetById(base.UserContext, entity.Id));
			}

			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>

				service.Delete(base.UserContext, entity);

				Assert.IsNull(service.GetById(base.UserContext, entity.Id));

				Assert.IsTrue(entity.Id == 0);
				Assert.IsFalse(entity.IsInDb);
				Assert.IsTrue(entity.State == EntityState.Deleted);
			}
		}
<#
	if (Context.Table.IsOwnership)
	{
#>

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=Context.Table.Name#>_SetLock()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>
				Assert.IsFalse(entity.IsLocked);

				service.SetLock(base.UserContext, ref entity, true);
				Assert.IsTrue(entity.IsLocked);

				entity.State = EntityState.ToUpdate;

				int rowCount = service.Save(base.UserContext, ref entity);
				Assert.IsTrue(rowCount == 0); // A locked entity cannot be modified...

				rowCount = service.Delete(base.UserContext, entity); // A locked entity cannot be deleted...

				Assert.IsTrue(rowCount == 0);
				Assert.IsTrue(entity.IsInDb);
				Assert.IsTrue(entity.State != EntityState.Deleted);

				rowCount = service.Delete(base.UserContext, entity); // A locked entity (by Id) cannot be deleted...

				Assert.IsTrue(rowCount == 0);
				Assert.IsTrue(entity.IsInDb);
				Assert.IsTrue(entity.State != EntityState.Deleted);

				service.SetLock(base.UserContext, ref entity, false);
				Assert.IsFalse(entity.IsLocked);

				rowCount = service.Delete(base.UserContext, entity);

				Assert.IsTrue(rowCount > 0);
				Assert.IsFalse(entity.IsInDb);
				Assert.IsTrue(entity.State == EntityState.Deleted);
			}
		}

		[TestMethod]
		public void Service_<#=Context.Table.Name#>_WithSecurityContext()
		{
			IUserContext speUserContext = new ClientContext(2, "user_jweaver", "pass_jweaver");

			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=Context.Table.Name#>ModelTests.Create<#=Context.Table.Name#>();

				var service = new <#=Context.Table.Name#>Service();

<#
	if (Context.Table.Columns.Any(c => c.ForeignKey != null))
	{
#>
				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
<#
	}
	else
	{
#>
				service.Save(base.UserContext, ref entity);
<#
	}
#>

				entity.State = EntityState.ToUpdate;

				bool bException = false;

				try
				{
					service.Save(speUserContext, ref entity);
				}
				catch (System.Exception x)
				{
					bException = true;
					Assert.IsTrue(x.Message.StartsWith("OwnerException"));
				}

				Assert.IsTrue(bException);
			}
		}
<#
	}

	if (Context.Table.ZeroToOneRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToOneRelations)
		{
#>

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=relation.TableName#>_Load<#=relation.CSharpPropertyName#>()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=relation.TableName#>ModelTests.Create<#=relation.TableName#>();
				bool bWith<#=relation.CSharpPropertyName#> = entity.<#=relation.CSharpPropertyName#> != null;

				<#=relation.TableName#>Service service = new <#=relation.TableName#>Service();

				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });
				entity = service.GetById(base.UserContext, entity.Id); // Get back the entity without the children...

				service.Load<#=relation.CSharpPropertyName#>(base.UserContext, ref entity);
				var child = entity.<#=relation.CSharpPropertyName#>;

				Assert.IsTrue((bWith<#=relation.CSharpPropertyName#> && child != null) || (!bWith<#=relation.CSharpPropertyName#> && child == null));
				
				if (child != null)
				{
					Assert.AreEqual(child.Id, entity.Id<#=relation.CSharpPropertyName#>);
				}
			}
		}
<#
		}
	}

	if (Context.Table.ZeroToManyRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
		{
			var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.ReferencedTableName, relation.TableName), "");
#>

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=relation.TableName#>_Load<#=relation.CSharpPropertyName#>Collection()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity = Models_<#=relation.TableName#>ModelTests.Create<#=relation.TableName#>();

				<#=relation.TableName#>Service service = new <#=relation.TableName#>Service();
				<#=relation.ReferencedTableName#>Service service<#=relation.CSharpPropertyName#> = new <#=relation.ReferencedTableName#>Service();

				service.Save(base.UserContext, ref entity, new SaveOptions { SaveChildren = true });

				var subEntity = Models_<#=relation.ReferencedTableName#>ModelTests.Create<#=relation.ReferencedTableName#>();

				subEntity.Id<#=relation.TableName#><#=suffix#> = entity.Id;
				subEntity.<#=relation.TableName#><#=suffix#> = null;
				
				service<#=relation.CSharpPropertyName#>.Save(base.UserContext, ref subEntity, new SaveOptions { SaveChildren = true });
				entity = service.GetById(base.UserContext, entity.Id); // Get back the entity without the children...

				service.Load<#=relation.CSharpPropertyName#>Collection(base.UserContext, ref entity);

				Assert.IsNotNull(entity.<#=relation.CSharpPropertyName#>Collection);
				Assert.IsTrue(entity.<#=relation.CSharpPropertyName#>Collection.Count != 0);
			}
		}

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void Service_<#=relation.TableName#>_Load<#=relation.CSharpPropertyName#>Collection_FromCollection()
		{
			using (var scope = TransactionScopeHelper.CreateDefaultTransactionScope())
			{
				var entity_1 = Models_<#=relation.TableName#>ModelTests.Create<#=relation.TableName#>();
				var entity_2 = Models_<#=relation.TableName#>ModelTests.Create<#=relation.TableName#>();

				<#=relation.TableName#>Service service = new <#=relation.TableName#>Service();
				<#=relation.ReferencedTableName#>Service service<#=relation.CSharpPropertyName#> = new <#=relation.ReferencedTableName#>Service();

				service.Save(base.UserContext, ref entity_1, new SaveOptions { SaveChildren = true });
				service.Save(base.UserContext, ref entity_2, new SaveOptions { SaveChildren = true });

				var subEntity_1 = Models_<#=relation.ReferencedTableName#>ModelTests.Create<#=relation.ReferencedTableName#>();
				var subEntity_2 = Models_<#=relation.ReferencedTableName#>ModelTests.Create<#=relation.ReferencedTableName#>();

				subEntity_1.Id<#=relation.TableName#><#=suffix#> = entity_1.Id;
				subEntity_1.<#=relation.TableName#><#=suffix#> = null;
				
				subEntity_2.Id<#=relation.TableName#><#=suffix#> = entity_2.Id;
				subEntity_2.<#=relation.TableName#><#=suffix#> = null;

				service<#=relation.CSharpPropertyName#>.Save(base.UserContext, ref subEntity_1, new SaveOptions { SaveChildren = true });
				service<#=relation.CSharpPropertyName#>.Save(base.UserContext, ref subEntity_2, new SaveOptions { SaveChildren = true });

				entity_1 = service.GetById(base.UserContext, entity_1.Id); // Get back the entity without the children...
				entity_2 = service.GetById(base.UserContext, entity_2.Id); // Get back the entity without the children...

				var collection = new TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=relation.TableName#>>();

				collection.Add(entity_1);
				collection.Add(entity_2);

				service.Load<#=relation.CSharpPropertyName#>Collection(base.UserContext, collection);

				Assert.IsTrue(collection[0].<#=relation.CSharpPropertyName#>Collection.Count == 1);
				Assert.IsTrue(collection[1].<#=relation.CSharpPropertyName#>Collection.Count == 1);
			}
		}
<#
		}
	}
#>
	}
}