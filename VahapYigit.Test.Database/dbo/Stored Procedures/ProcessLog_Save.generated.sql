-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessLog_Save
(
	@ProcessLog_Id BIGINT = 0,
	@ProcessLog_Date DATETIME2(3),
	@ProcessLog_ProcedureName VARCHAR(96),
	@ProcessLog_Data VARCHAR(MAX),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @ProcessLog_Id;

			IF @ProcessLog_Id < 1
			BEGIN
				INSERT INTO [ProcessLog]
				(
					 [ProcessLog].[ProcessLog_Date]
					,[ProcessLog].[ProcessLog_ProcedureName]
					,[ProcessLog].[ProcessLog_Data]
				)
				VALUES
				(
					 @ProcessLog_Date
					,@ProcessLog_ProcedureName
					,@ProcessLog_Data
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'ProcessLog_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [ProcessLog_LOGS]'
							+ N' ('
							+ N'  [ProcessLog_LOGS].[ProcessLog_Id]'
							+ N' ,[ProcessLog_LOGS].[ProcessLog_Date]'
							+ N' ,[ProcessLog_LOGS].[ProcessLog_ProcedureName]'
							+ N' ,[ProcessLog_LOGS].[ProcessLog_Data]'
							+ N' )'
							+ N' SELECT'
							+ N'  [ProcessLog].[ProcessLog_Id]'
							+ N' ,[ProcessLog].[ProcessLog_Date]'
							+ N' ,[ProcessLog].[ProcessLog_ProcedureName]'
							+ N' ,[ProcessLog].[ProcessLog_Data]'
							+ N' FROM'
							+ N' [ProcessLog] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [ProcessLog].[ProcessLog_Id] = @ProcessLog_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@ProcessLog_Id BIGINT', @ProcessLog_Id;
					END

					UPDATE
						[ProcessLog]
					SET
						 [ProcessLog].[ProcessLog_Date] = @ProcessLog_Date
						,[ProcessLog].[ProcessLog_ProcedureName] = @ProcessLog_ProcedureName
						,[ProcessLog].[ProcessLog_Data] = @ProcessLog_Data
					WHERE
						[ProcessLog_Id] = @ProcessLog_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[ProcessLog] WITH(NOLOCK)
		WHERE	[ProcessLog].[ProcessLog_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessLog_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END