//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Contracts
{
	using System;
	using System.Net.Security;
	using System.ServiceModel;
	using System.ServiceModel.Web;
	using System.Threading.Tasks;
	using System.Xml;

	/// <summary>
	/// UserRoleService Contract.
	/// </summary>
	[ServiceContract(Namespace = VahapYigit.Test.Core.Globals.Namespace)]
	[ServiceKnownType(typeof(VahapYigit.Test.Core.ClientContext))]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	public partial interface IUserRoleService : IService
	{
		#region [ IUserRoleService ]
		
		/// <summary>
		/// Refreshs the entity instance from the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="appSettings">
		/// Entity to refresh (must be in database).
		/// </param>
		[OperationContract(Name = "GeneratedRefresh")]
		void Refresh(VahapYigit.Test.Core.IUserContext userContext, ref VahapYigit.Test.Models.UserRole entity);
		
		/// <summary>
		/// Gets an entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
		[OperationContract(Name = "GeneratedGetById")]
		VahapYigit.Test.Models.UserRole GetById(VahapYigit.Test.Core.IUserContext userContext, long id);

		/// <summary>
		/// Gets all the UserRole entities associated to a given User.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="idUser">
		/// Unique ID of the User.
		/// </param>
		/// 
		/// <returns>
		/// A collection of UserRole entities.
		/// </returns>
		[OperationContract(Name = "GeneratedGetByIdUser")]
		TCollection<VahapYigit.Test.Models.UserRole> GetByIdUser(VahapYigit.Test.Core.IUserContext userContext, long idUser);

		/// <summary>
		/// Gets entities with search options.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options, filters, orderby, paging, etc..
		/// </param>
		/// 
		/// <returns>
		/// A collection of entities.
		/// </returns>
		[OperationContract(Name = "GeneratedSearch")]
		TCollection<VahapYigit.Test.Models.UserRole> Search(VahapYigit.Test.Core.IUserContext userContext, ref VahapYigit.Test.Core.SearchOptions options);
		
		/// <summary>
		/// Gets the number of records that verify the search options.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional search options. If not defined all records are counted.
		/// </param>
		/// 
		/// <returns>
		/// The number of records.
		/// </returns>
		[OperationContract(Name = "GeneratedCount")]
		int Count(VahapYigit.Test.Core.IUserContext userContext, VahapYigit.Test.Core.SearchOptions options = null);
		
		/// <summary>
		/// Indicates whether the search returns at least 1 entity.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options, filters, orderby, paging, etc.
		/// </param>
		/// 
		/// <returns>
		/// True if the search returns at least 1 entity; otherwise, false.
		/// </returns>
		[OperationContract(Name = "GeneratedHasResult")]
		bool HasResult(VahapYigit.Test.Core.IUserContext userContext, VahapYigit.Test.Core.SearchOptions options = null);
		
		/// <summary>
		/// Saves (or updates) the entity in the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		///
		/// <param name="entity">
		/// Entity to save or update.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		[OperationContract(Name = "GeneratedSave")]
		int Save(VahapYigit.Test.Core.IUserContext userContext, ref VahapYigit.Test.Models.UserRole entity, VahapYigit.Test.Core.SaveOptions options = null);
		
		/// <summary>
		/// Deletes the entity from the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// Entity to delete.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		[OperationContract(Name = "GeneratedDelete")]
		int Delete(VahapYigit.Test.Core.IUserContext userContext,VahapYigit.Test.Models.UserRole entity);
		
		/// <summary>
		/// Deletes the entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		[OperationContract(Name = "GeneratedDeleteById")]
		int Delete(VahapYigit.Test.Core.IUserContext userContext, long id);

		/// <summary>
		/// Loads the User entity associated to the current instance (entity.User property).
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
		[OperationContract(Name = "GeneratedLoadUser")]
		void LoadUser(VahapYigit.Test.Core.IUserContext userContext, ref VahapYigit.Test.Models.UserRole entity);

		/// <summary>
		/// Loads the Role entity associated to the current instance (entity.Role property).
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
		[OperationContract(Name = "GeneratedLoadRole")]
		void LoadRole(VahapYigit.Test.Core.IUserContext userContext, ref VahapYigit.Test.Models.UserRole entity);

		#endregion

	}
}