//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Crud
{
	using System;
	using System.Collections.Generic;
	using System.Data.Common;

	using VahapYigit.Test.Core;
	using VahapYigit.Test.Models;

	public class CommonCrud : Crud
	{
		#region [ Constructor ]

		/// <summary>
		/// Constructor.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		public CommonCrud(IUserContext userContext)
			: base(userContext)
		{
			base.Initialize();
		}

		#endregion

		#region [ Public methods ]

		public IList<GlobalSearchResultItem> GlobalSearch(string keyword, ref PagingOptions paging, IEnumerable<string> restrictionTableNames = null)
		{
			DbConnection dbConnection;

			IList<GlobalSearchResultItem> list = new List<GlobalSearchResultItem>();

			if (paging == null)
			{
				paging = new PagingOptions();
			}

			var parameters = new Dictionary<string, object>();

			parameters.Add("@Keyword", keyword);

			string sRestrictionTableNames = null;

			if (!restrictionTableNames.IsNullOrEmpty())
			{
				sRestrictionTableNames = string.Join(",", restrictionTableNames);
			}

			parameters.Add("@RestrictionTableNames", sRestrictionTableNames);

			parameters.Add("@CtxPagingCurrentPage", paging.CurrentPage);
			parameters.Add("@CtxPagingRecordsPerPage", paging.RecordsPerPage);

			using (var et = new ExecutionTracerService())
			using (var dbReader = base.ToDataReader("Common_Custom_GlobalSearch", parameters, out dbConnection))
			{
				while (dbReader.Read())
				{
					var item = new GlobalSearchResultItem();

					item.TableName = TypeHelper.To<string>(dbReader, "TableName");
					item.ColumnName = TypeHelper.To<string>(dbReader, "ColumnName");
					item.Id = TypeHelper.To<long>(dbReader, "Id");
					item.Value = TypeHelper.To<string>(dbReader, "Value");

					list.Add(item);
				}

				dbReader.NextResult();
				dbReader.Read();

				paging.TotalRecords = TypeHelper.To<int>(dbReader, "TotalRecords");
			}

			if (dbConnection != null)
				dbConnection.Close();

			return list;
		}

		public IList<TableSizeModel> GetTableSizes()
		{
			IList<TableSizeModel> list = new List<TableSizeModel>();

			DbConnection dbConnection;

			using (var et = new ExecutionTracerService())
			using (var dbReader = base.ToDataReader("Common_Custom_GetTableSizes", null, out dbConnection))
			{
				while (dbReader.Read())
				{
					var item = new TableSizeModel();

					item.Name = TypeHelper.To<string>(dbReader, "Name");
					item.RowCounts = TypeHelper.To<int>(dbReader, "Rows");
					item.TableSizeInMB = TypeHelper.To<double>(dbReader, "TableSizeInMB");
					item.IndexSizeInMB = TypeHelper.To<double>(dbReader, "IndexSizeInMB");

					list.Add(item);
				}
			}

			if (dbConnection != null)
				dbConnection.Close();

			return list;
		}

		#endregion
	}
}
