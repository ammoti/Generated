<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Tests
{
	using System;
	using System.Net;
	using System.Net.Security;
	using System.Threading.Tasks;

	using Microsoft.VisualStudio.TestTools.UnitTesting;
	
	using <#=Context.ProcessorContext.ProjectName#>.ClientCore;
	using <#=Context.ProcessorContext.ProjectName#>.Contracts;
	using <#=Context.ProcessorContext.ProjectName#>.Core;

	[TestClass]
	public class <#=Context.Table.Name#>WcfServiceTests : <#=Context.ProcessorContext.ProjectName#>.Tests.UnitTestBase
	{
		[TestInitialize]
		public void Initialize()
		{
			ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(
				ServerCertificateValidationHelper.ValidateRemoteCertificateCallback);
		}

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public void WcfService_<#=Context.Table.Name#>_WakeUp()
		{
			using (var service = new ServiceProxy<I<#=Context.Table.Name#>Service>())
			{
				bool bIsWakeUp = service.Proxy.WakeUp(base.UserContext);
				Assert.IsTrue(bIsWakeUp);
			}
		}

		[TestMethod]
		[TestCategory(TestCategory.GeneratedTest)]
		public async Task WcfService_<#=Context.Table.Name#>_WakeUpAsync()
		{
			using (var service = new ServiceProxy<I<#=Context.Table.Name#>Service>())
			{
				bool bIsWakeUp = false;
				
				try
				{
					bIsWakeUp = await service.Proxy.WakeUpAsync(base.UserContext);
				}
				catch (System.Exception x)
				{
					bIsWakeUp = false;
					
					ThrowException.Throw(
						"User WCF Service exception: {0} (inner: {1}) (endpoint: {2})",
						x.Message,
						(x.InnerException != null ? x.InnerException.Message : "null"),
						service);
				}

				Assert.IsTrue(bIsWakeUp);
			}
		}
	}
}