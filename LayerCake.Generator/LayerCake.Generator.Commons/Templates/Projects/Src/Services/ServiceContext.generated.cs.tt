<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//-----------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Services
{
	using System;
	using System.Diagnostics;

	/// <summary>
	/// Contains the default registered service instances (each service is shared).
	/// </summary>
	public static partial class ServiceContext
	{
		private static readonly object _locker = new object();

<#
	foreach (var table in Context.Schema.Tables)
	{
#>
		/// <summary>
		/// Gets the default <#=table.Name#>Service instance.
		/// </summary>
		[DebuggerHidden]
		public static <#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=table.Name#>Service <#=table.Name#>Service
		{
			get
			{
				const string name = "<#=table.Name#>Service.Default";
				<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=table.Name#>Service service = null;

				if (!ServiceLocator.Current.HasInstance<<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=table.Name#>Service>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=table.Name#>Service>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=table.Name#>Service>(
								name, new <#=Context.ProcessorContext.ProjectName#>.Services.<#=table.Name#>Service());
						}
					}
				}

				return service;
			}
		}

<#
	}
	
	foreach (var businessClass in Context.BusinessClasses.Where(i => !Context.Schema.Tables.Any(j => j.Name == i.Name)))
	{
#>
		/// <summary>
		/// Gets the default <#=businessClass.Name#>Service instance.
		/// </summary>
		[DebuggerHidden]
		public static <#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=businessClass.Name#>Service <#=businessClass.Name#>Service
		{
			get
			{
				const string name = "<#=businessClass.Name#>Service.Default";
				<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=businessClass.Name#>Service service = null;

				if (!ServiceLocator.Current.HasInstance<<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=businessClass.Name#>Service>(name, out service))
				{
					lock (_locker)
					{
						if (!ServiceLocator.Current.HasInstance<<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=businessClass.Name#>Service>(name, out service))
						{
							service = ServiceLocator.Current.RegisterInstance<<#=Context.ProcessorContext.ProjectName#>.Contracts.I<#=businessClass.Name#>Service>(
								name, new <#=Context.ProcessorContext.ProjectName#>.Services.<#=businessClass.Name#>Service());
						}
					}
				}

				return service;
			}
		}

<#
	}
#>
	}
}