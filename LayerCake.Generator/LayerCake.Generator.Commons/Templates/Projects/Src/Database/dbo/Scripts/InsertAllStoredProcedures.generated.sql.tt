<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ parameter name="ParamStoredProcedurePath" type="System.String" #>
<#@ include file="Commons/Includes.ttinclude" #>
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

-- DO NOT ADD THIS FILE TO THE DATABASE PROJECT!

-- NOTE: this script is executed on the target database when generated.

<#
	const string extension = ".generated.sql";
	const string tmpExtension = extension + ".lcg-tmp"; // from TextTemplatingOutputFileDefinition.cs -> TmpOutputFilePattern = "{0}.lcg-tmp";

	var psFiles = new List<FileInfo>();

	foreach (var table in Context.Schema.Tables)
	{
		foreach (var psFile in new DirectoryInfo(ParamStoredProcedurePath).GetFiles(string.Format("{0}_*{1}", table.Name, tmpExtension)))
		{
			if (psFile.Name.EndsWith("_SetLock" + extension) && !table.IsOwnership) // Exclude 'TableName_SetLock.generated.sql.lcg-tmp' if the table is not longer Ownership table
			{
				continue;
			}

			psFiles.Add(psFile);
		}
	}

	foreach (var psFile in psFiles)
	{
		string psName = psFile.Name.Replace(tmpExtension, string.Empty);
#>
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[<#=psName#>]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [<#=psName#>]
GO
<#
	}

	// ProcessErrorLog_Save must be at the first position to avoid the following warning:
	// The module 'PS_NAME' depends on the missing object 'ProcessErrorLog_Save'. The module will still be created; however, it cannot run successfully until the object exists.

	foreach (FileInfo psFile in psFiles.Where(i => i.Name.Replace(tmpExtension, string.Empty).StartsWith("ProcessErrorLog_Save")))
	{
#>
<#=File.ReadAllText(psFile.FullName)#>
GO
<#
	}

	foreach (FileInfo psFile in psFiles.Where(i => !i.Name.Replace(tmpExtension, string.Empty).StartsWith("ProcessErrorLog_Save")))
	{
#>
<#=File.ReadAllText(psFile.FullName)#>
GO
<#
	}
#>