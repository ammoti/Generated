<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Contracts
{
	using System;
	using System.Net.Security;
	using System.ServiceModel;
	using System.ServiceModel.Web;
	using System.Threading.Tasks;
	using System.Xml;

	/// <summary>
	/// <#=Context.Table.Name#>Service Contract.
	/// </summary>
	[ServiceContract(<#=GetServiceContractParametersInLine(Context.ProcessorContext.ProjectName, Context.BusinessClass)#>)]
	[ServiceKnownType(typeof(<#=Context.ProcessorContext.ProjectName#>.Core.ClientContext))]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	public partial interface I<#=Context.Table.Name#>Service : IService
	{
<#
	if (Context.Schema.Tables.Any(i => i.Name == Context.Table.Name))
	{
#>
		#region [ I<#=Context.Table.Name#>Service ]
		
		/// <summary>
		/// Refreshs the entity instance from the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="appSettings">
		/// Entity to refresh (must be in database).
		/// </param>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedRefresh")]
<#
		}
#>
		void Refresh(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity);
		
		/// <summary>
		/// Gets an entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedGetById")]
<#
		}
#>
		<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetById(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, long id);
<#
		if (Context.Table.Name == Context.ProcessorContext.AuthenticationSupport.UserTableName)
		{
			string identifier = Context.ProcessorContext.AuthenticationSupport.UserTableIdentifiedColumnName;
			identifier = identifier.Substring(Context.ProcessorContext.AuthenticationSupport.UserTableName.Length + 1);
			identifier = ToMemberName(identifier);
#>

		/// <summary>
		/// Gets an entity given its <#=identifier#> value.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="<#=identifier#>">
		/// Unique <#=identifier#> value.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedGetByIdentifier")]
<#
		}
#>
		<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetByIdentifier(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, string <#=identifier#>);
<#
		}

		if (Context.Table.HasIdUserColumn)
		{
#>

		/// <summary>
		/// Gets all the <#=Context.Table.Name#> entities associated to a given <#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>">
		/// Unique ID of the <#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.
		/// </param>
		/// 
		/// <returns>
		/// A collection of <#=Context.Table.Name#> entities.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedGetById<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>")]
<#
		}
#>
		TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> GetById<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, long id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>);
<#
		}
	
		if (Context.Table.HasCodeRefColumn)
		{
#>
		
		/// <summary>
		/// Gets an entity given its unique CodeRef value.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="codeRef">
		/// Unique CodeRef value.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedGetByCodeRef")]
<#
		}
#>
		<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetByCodeRef(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, string codeRef);
<#
		}
#>

		/// <summary>
		/// Gets entities with search options.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options, filters, orderby, paging, etc..
		/// </param>
		/// 
		/// <returns>
		/// A collection of entities.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedSearch")]
<#
		}
#>
		TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> Search(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Core.SearchOptions options);
		
		/// <summary>
		/// Gets the number of records that verify the search options.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional search options. If not defined all records are counted.
		/// </param>
		/// 
		/// <returns>
		/// The number of records.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedCount")]
<#
		}
#>
		int Count(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, <#=Context.ProcessorContext.ProjectName#>.Core.SearchOptions options = null);
		
		/// <summary>
		/// Indicates whether the search returns at least 1 entity.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options, filters, orderby, paging, etc.
		/// </param>
		/// 
		/// <returns>
		/// True if the search returns at least 1 entity; otherwise, false.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedHasResult")]
<#
		}
#>
		bool HasResult(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, <#=Context.ProcessorContext.ProjectName#>.Core.SearchOptions options = null);
		
		/// <summary>
		/// Saves (or updates) the entity in the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		///
		/// <param name="entity">
		/// Entity to save or update.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedSave")]
<#
		}
#>
		int Save(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, <#=Context.ProcessorContext.ProjectName#>.Core.SaveOptions options = null);
		
		/// <summary>
		/// Deletes the entity from the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// Entity to delete.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedDelete")]
<#
		}
#>
		int Delete(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext,<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity);
		
		/// <summary>
		/// Deletes the entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedDeleteById")]
<#
		}
#>
		int Delete(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, long id);
<#
		if (Context.Table.IsOwnership)
		{
#>

		/// <summary>
		/// Sets the Lock status (IsLocked field). A locked entity cannot be neither modified nor deleted on database-side.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// Entity to lock or unlock.
		/// </param>
		/// 
		/// <param name="isLocked">
		/// Lock status to set.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedSetLock")]
<#
		}
#>
		int SetLock(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, bool isLocked);
<#
		}

		if (Context.Table.ZeroToOneRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToOneRelations)
			{
#>

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entity associated to the current instance (entity.<#=relation.CSharpPropertyName#> property).
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedLoad<#=relation.CSharpPropertyName#>")]
<#
		}
#>
		void Load<#=relation.CSharpPropertyName#>(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity);
<#
			}
		}

		if (Context.Table.ZeroToManyRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
			{
#>

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entities associated to the current instance (entity.<#=relation.CSharpPropertyName#>Collection property).
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedLoad<#=relation.CSharpPropertyName#>Collection")]
<#
		}
#>
		void Load<#=relation.CSharpPropertyName#>Collection(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity);

		/// <summary>
		/// Loads the <#=relation.ReferencedTableName#> entities associated to the instances (entity.<#=relation.ReferencedTableName#> collection property).
		/// </summary>
		/// 
		/// <param name="collection">
		/// The target entity collection.
		/// </param>
<#
		if (IsExposedOnWcfSide(Context.ProcessorContext))
		{
#>
		[OperationContract(Name = "GeneratedLoad<#=relation.ReferencedTableName#>CollectionEx")]
<#
		}
#>
		void Load<#=relation.CSharpPropertyName#>Collection(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> collection);
<#
			}
		}
#>

		#endregion

<#
	}

	if (Context.BusinessClass != null && Context.BusinessClass.BusinessMethods.Count != 0)
	{
#>
		#region [ I<#=Context.Table.Name#>Service Business ]
		#pragma warning disable 1591 // Disable 'missing XML comment for publicly visible type or member' warnings

<#
		foreach (BusinessMethodInfo businessMethod in Context.BusinessClass.BusinessMethods)
		{
#>
		[OperationContract(<#=GetOperationContractParametersInLine(businessMethod, false)#>)]
		<#=GetContractSignature(businessMethod.Method)#>;
		
<#
		}
#>
		#pragma warning restore 1591
		#endregion
<#
	}
#>
	}
}