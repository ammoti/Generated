//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Models
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Data;
	using System.Diagnostics;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Xml.Serialization;

	using VahapYigit.Test.Core;

	/// <summary>
	/// Entity mapped to Role DB table.
	/// </summary>
	[Serializable]
	[DataContract(Namespace = Globals.Namespace, IsReference = true)]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public partial class Role : EntityBase, IRole
	{
		/// <summary>
		/// Gets the name of the entity.
		/// </summary>
		public static readonly string EntityName = "Role";

		#region [ Constructor ]

		/// <summary>
		/// Default constructor.
		/// </summary>
		public Role()
			: base()
		{
			this.Initialize();
		}

		#endregion

		#region [ Events ]

		#endregion

		#region [ Column Names ]

		/// <summary>
		/// Contains the entity column names.
		/// </summary>
		public static partial class ColumnNames
		{
			/// <summary>
			/// Name of the Id column ("Role_Id").
			/// </summary>
			public static readonly string Id = "Role_Id";

			/// <summary>
			/// Name of the CodeRef column ("Role_CodeRef").
			/// </summary>
			public static readonly string CodeRef = "Role_CodeRef";

			/// <summary>
			/// Name of the Name column ("Role_Name").
			/// </summary>
			public static readonly string Name = "Role_Name";

		}

		#endregion

		#region [ Property Names ]

		/// <summary>
		/// Contains the entity property names.
		/// </summary>
		public static partial class PropertyNames
		{
			/// <summary>
			/// Name of the Id property ("Id").
			/// </summary>
			public static readonly string Id = "Id";

			/// <summary>
			/// Name of the CodeRef property ("CodeRef").
			/// </summary>
			public static readonly string CodeRef = "CodeRef";

			/// <summary>
			/// Name of the Name property ("Name").
			/// </summary>
			public static readonly string Name = "Name";

		}

		#endregion
	
		#region [ CodeRefs ]

		/// <summary>
		/// Contains the entity CodeRef values.
		/// </summary>
		public static partial class CodeRefs
		{
			/// <summary>
			/// CodeRef = "Admin".
			/// </summary>
			public static readonly string Admin = "Admin";

			/// <summary>
			/// CodeRef = "Staff".
			/// </summary>
			public static readonly string Staff = "Staff";

			/// <summary>
			/// CodeRef = "Member".
			/// </summary>
			public static readonly string Member = "Member";

		}

		#endregion

		#region [ CodeRefEnum ]

		/// <summary>
		/// CodeRef values enumeration.
		/// </summary>
		[Serializable]
		[DataContract]
		public enum CodeRefEnum
		{
			[XmlEnum]
			[EnumMember]
			Admin = 1,

			[XmlEnum]
			[EnumMember]
			Staff = 2,

			[XmlEnum]
			[EnumMember]
			Member = 3,

		}

		#endregion

		#region [ Properties ]

		#region [ CodeRef ]

		private string _CodeRef;

		/// <summary>
		/// Gets or sets the CodeRef value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string CodeRef
		{
			get { return _CodeRef; }
			set
			{
				if (value != _CodeRef)
				{
					_CodeRef = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateCodeRef();
					}
				}
			}
		}

		/// <summary>
		/// Method called on CodeRef value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the CodeRef value is valid (format, value, etc).
		/// </param>
		partial void OnCodeRefValidation(ref TranslationEnum? error);

		private bool ValidateCodeRef()
		{
			bool isValid = false;

			do
			{
				if (string.IsNullOrEmpty(this.CodeRef))
				{
					base.AddValidationError("CodeRef", TranslationEnum.ModelRoleCodeRefIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnCodeRefValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("CodeRef", error.Value);
					break;
				}

				base.RemoveValidationErrors("CodeRef");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ Name ]

		private string _Name;

		/// <summary>
		/// Gets or sets the Name value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string Name
		{
			get { return _Name; }
			set
			{
				if (value != _Name)
				{
					_Name = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateName();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Name value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Name value is valid (format, value, etc).
		/// </param>
		partial void OnNameValidation(ref TranslationEnum? error);

		private bool ValidateName()
		{
			bool isValid = false;

			do
			{
				if (this.Name == null)
				{
					base.AddValidationError("Name", TranslationEnum.ModelRoleNameIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnNameValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Name", error.Value);
					break;
				}

				base.RemoveValidationErrors("Name");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#endregion

		#region [ References ]

		private TCollection<UserRole> _UserRoleCollection = null;
		/// <summary>
		/// Referenced UserRole entity collection by this entity.
		/// </summary>
		[DataMember()]
		public virtual TCollection<UserRole> UserRoleCollection
		{
			get
			{
				if (_UserRoleCollection == null)
				{
					_UserRoleCollection = new TCollection<UserRole>();
				}

				return _UserRoleCollection;
			}
			set
			{
				_UserRoleCollection = value;
			}
		}

		#endregion

		#region [ EntityBase Implementation ]

		/// <summary>
		/// Gets the entity properties validity.
		/// </summary>
		/// 
		/// <param name="errors">
		/// Translation errors list (each item represents a translation key of an error).
		/// </param>
		/// 
		/// <returns>
		/// True if all the entity properties are correct; otherwise, false.
		/// </returns>
		public override bool IsValid(out IList<TranslationEnum> errors)
		{
			IList<TranslationEnum> errs = new List<TranslationEnum>();

			if (!this.ValidateCodeRef())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("CodeRef");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateName())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Name");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			errors = errs;

			return errors.Count == 0;
		}
		
		/// <summary>
		/// Fill the entity properties using a source.
		/// </summary>
		/// 
		/// <param name="source">
		/// Source.
		public override void Map(EntityBase source)
		{
			if (source == null)
			{
				ThrowException.ThrowArgumentNullException("source");
			}

			if (!(source is Role))
			{
				ThrowException.ThrowArgumentException("The 'source' argument is not a 'Role' instance");
			}

			this.CodeRef = ((Role)source).CodeRef;
			this.Name = ((Role)source).Name;

			this.Id = source.Id;
			this.State = source.State;
		}

		/// <summary>
		/// Fills the entity properties using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(IDataReader source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.CodeRef = TypeHelper.To<string>(source[string.Format("{0}CodeRef", columnPrefix)]);
			this.Name = TypeHelper.To<string>(source[string.Format("{0}Name", columnPrefix)]);

			this.State = EntityState.None;
		}

		/// <summary>
		/// Fill the entity properties using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(DataRow source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.CodeRef = TypeHelper.To<string>(source[string.Format("{0}CodeRef", columnPrefix)]);
			this.Name = TypeHelper.To<string>(source[string.Format("{0}Name", columnPrefix)]);

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fills the entity properties and all its dependencies using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(IDataReader source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			if (source.HasColumn(UserRole.ColumnNames.Id) && source[UserRole.ColumnNames.Id] != DBNull.Value)
			{
				if (!this.UserRoleCollection.Any(i => i.Id == (long)source[UserRole.ColumnNames.Id]))
				{
					var entity = new UserRole { IdRole = this.Id, Role = this };
					entity.DeepMap(source, userContext);

					this.UserRoleCollection.Add(entity);
				}
			}

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fill the entity properties and all its dependencies using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(DataRow source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			if (source.HasColumn(UserRole.ColumnNames.Id) && source[UserRole.ColumnNames.Id] != DBNull.Value)
			{
				if (!this.UserRoleCollection.Any(i => i.Id == (long)source[UserRole.ColumnNames.Id]))
				{
					var entity = new UserRole { IdRole = this.Id, Role = this };
					entity.DeepMap(source, userContext);

					this.UserRoleCollection.Add(entity);
				}
			}

			this.State = EntityState.None;
		}

		#endregion
	}
}