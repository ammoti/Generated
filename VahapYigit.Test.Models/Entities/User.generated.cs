//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Models
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Data;
	using System.Diagnostics;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Xml.Serialization;

	using VahapYigit.Test.Core;

	/// <summary>
	/// Entity mapped to User DB table.
	/// </summary>
	[Serializable]
	[DataContract(Namespace = Globals.Namespace, IsReference = true)]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public partial class User : EntityBase, IUser
	{
		/// <summary>
		/// Gets the name of the entity.
		/// </summary>
		public static readonly string EntityName = "User";

		#region [ Constructor ]

		/// <summary>
		/// Default constructor.
		/// </summary>
		public User()
			: base()
		{
			this.Initialize();
		}

		#endregion

		#region [ Events ]

		#endregion

		#region [ Column Names ]

		/// <summary>
		/// Contains the entity column names.
		/// </summary>
		public static partial class ColumnNames
		{
			/// <summary>
			/// Name of the Id column ("User_Id").
			/// </summary>
			public static readonly string Id = "User_Id";

			/// <summary>
			/// Name of the Username column ("User_Username").
			/// </summary>
			public static readonly string Username = "User_Username";

			/// <summary>
			/// Name of the Password column ("User_Password").
			/// </summary>
			public static readonly string Password = "User_Password";

			/// <summary>
			/// Name of the Email column ("User_Email").
			/// </summary>
			public static readonly string Email = "User_Email";

			/// <summary>
			/// Name of the PasswordQuestion column ("User_PasswordQuestion").
			/// </summary>
			public static readonly string PasswordQuestion = "User_PasswordQuestion";

			/// <summary>
			/// Name of the PasswordResponse column ("User_PasswordResponse").
			/// </summary>
			public static readonly string PasswordResponse = "User_PasswordResponse";

			/// <summary>
			/// Name of the RegistrationDate column ("User_RegistrationDate").
			/// </summary>
			public static readonly string RegistrationDate = "User_RegistrationDate";

			/// <summary>
			/// Name of the LastConnectionDate column ("User_LastConnectionDate").
			/// </summary>
			public static readonly string LastConnectionDate = "User_LastConnectionDate";

			/// <summary>
			/// Name of the Culture column ("User_Culture").
			/// </summary>
			public static readonly string Culture = "User_Culture";

		}

		#endregion

		#region [ Property Names ]

		/// <summary>
		/// Contains the entity property names.
		/// </summary>
		public static partial class PropertyNames
		{
			/// <summary>
			/// Name of the Id property ("Id").
			/// </summary>
			public static readonly string Id = "Id";

			/// <summary>
			/// Name of the Username property ("Username").
			/// </summary>
			public static readonly string Username = "Username";

			/// <summary>
			/// Name of the Password property ("Password").
			/// </summary>
			public static readonly string Password = "Password";

			/// <summary>
			/// Name of the Email property ("Email").
			/// </summary>
			public static readonly string Email = "Email";

			/// <summary>
			/// Name of the PasswordQuestion property ("PasswordQuestion").
			/// </summary>
			public static readonly string PasswordQuestion = "PasswordQuestion";

			/// <summary>
			/// Name of the PasswordResponse property ("PasswordResponse").
			/// </summary>
			public static readonly string PasswordResponse = "PasswordResponse";

			/// <summary>
			/// Name of the RegistrationDate property ("RegistrationDate").
			/// </summary>
			public static readonly string RegistrationDate = "RegistrationDate";

			/// <summary>
			/// Name of the LastConnectionDate property ("LastConnectionDate").
			/// </summary>
			public static readonly string LastConnectionDate = "LastConnectionDate";

			/// <summary>
			/// Name of the Culture property ("Culture").
			/// </summary>
			public static readonly string Culture = "Culture";

		}

		#endregion

		#region [ Properties ]

		#region [ Username ]

		private string _Username;

		/// <summary>
		/// Gets or sets the Username value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string Username
		{
			get { return _Username; }
			set
			{
				if (value != _Username)
				{
					_Username = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateUsername();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Username value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Username value is valid (format, value, etc).
		/// </param>
		partial void OnUsernameValidation(ref TranslationEnum? error);

		private bool ValidateUsername()
		{
			bool isValid = false;

			do
			{
				if (this.Username == null)
				{
					base.AddValidationError("Username", TranslationEnum.ModelUserUsernameIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnUsernameValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Username", error.Value);
					break;
				}

				base.RemoveValidationErrors("Username");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ Password ]

		private string _Password;

		/// <summary>
		/// Gets or sets the Password value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string Password
		{
			get { return _Password; }
			set
			{
				if (value != _Password)
				{
					_Password = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidatePassword();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Password value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Password value is valid (format, value, etc).
		/// </param>
		partial void OnPasswordValidation(ref TranslationEnum? error);

		private bool ValidatePassword()
		{
			bool isValid = false;

			do
			{
				if (this.Password == null)
				{
					base.AddValidationError("Password", TranslationEnum.ModelUserPasswordIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnPasswordValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Password", error.Value);
					break;
				}

				base.RemoveValidationErrors("Password");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ Email ]

		private string _Email;

		/// <summary>
		/// Gets or sets the Email value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string Email
		{
			get { return _Email; }
			set
			{
				if (value != _Email)
				{
					_Email = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateEmail();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Email value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Email value is valid (format, value, etc).
		/// </param>
		partial void OnEmailValidation(ref TranslationEnum? error);

		private bool ValidateEmail()
		{
			bool isValid = false;

			do
			{
				if (this.Email == null)
				{
					base.AddValidationError("Email", TranslationEnum.ModelUserEmailIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnEmailValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Email", error.Value);
					break;
				}

				base.RemoveValidationErrors("Email");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ PasswordQuestion ]

		private string _PasswordQuestion;

		/// <summary>
		/// Gets or sets the PasswordQuestion value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string PasswordQuestion
		{
			get { return _PasswordQuestion; }
			set
			{
				if (value != _PasswordQuestion)
				{
					_PasswordQuestion = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidatePasswordQuestion();
					}
				}
			}
		}

		/// <summary>
		/// Method called on PasswordQuestion value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the PasswordQuestion value is valid (format, value, etc).
		/// </param>
		partial void OnPasswordQuestionValidation(ref TranslationEnum? error);

		private bool ValidatePasswordQuestion()
		{
			bool isValid = false;

			do
			{
				if (this.PasswordQuestion == null)
				{
					base.AddValidationError("PasswordQuestion", TranslationEnum.ModelUserPasswordQuestionIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnPasswordQuestionValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("PasswordQuestion", error.Value);
					break;
				}

				base.RemoveValidationErrors("PasswordQuestion");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ PasswordResponse ]

		private string _PasswordResponse;

		/// <summary>
		/// Gets or sets the PasswordResponse value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string PasswordResponse
		{
			get { return _PasswordResponse; }
			set
			{
				if (value != _PasswordResponse)
				{
					_PasswordResponse = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidatePasswordResponse();
					}
				}
			}
		}

		/// <summary>
		/// Method called on PasswordResponse value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the PasswordResponse value is valid (format, value, etc).
		/// </param>
		partial void OnPasswordResponseValidation(ref TranslationEnum? error);

		private bool ValidatePasswordResponse()
		{
			bool isValid = false;

			do
			{
				if (this.PasswordResponse == null)
				{
					base.AddValidationError("PasswordResponse", TranslationEnum.ModelUserPasswordResponseIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnPasswordResponseValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("PasswordResponse", error.Value);
					break;
				}

				base.RemoveValidationErrors("PasswordResponse");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ RegistrationDate ]

		private DateTime _RegistrationDate;

		/// <summary>
		/// Gets or sets the RegistrationDate value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual DateTime RegistrationDate
		{
			get { return _RegistrationDate; }
			set
			{
				if (value != _RegistrationDate)
				{
					_RegistrationDate = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateRegistrationDate();
					}
				}
			}
		}

		/// <summary>
		/// Method called on RegistrationDate value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the RegistrationDate value is valid (format, value, etc).
		/// </param>
		partial void OnRegistrationDateValidation(ref TranslationEnum? error);

		private bool ValidateRegistrationDate()
		{
			bool isValid = false;

			do
			{
				if (this.RegistrationDate == DateTime.MinValue)
				{
					base.AddValidationError("RegistrationDate", TranslationEnum.ModelUserRegistrationDateIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnRegistrationDateValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("RegistrationDate", error.Value);
					break;
				}

				base.RemoveValidationErrors("RegistrationDate");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ LastConnectionDate ]

		private DateTime? _LastConnectionDate;

		/// <summary>
		/// Gets or sets the LastConnectionDate value (OPTIONAL). 
		/// </summary>
		[DebuggerHidden]
		[DataMember()]
		public virtual DateTime? LastConnectionDate
		{
			get { return _LastConnectionDate; }
			set
			{
				if (value != _LastConnectionDate)
				{
					_LastConnectionDate = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateLastConnectionDate();
					}
				}
			}
		}

		/// <summary>
		/// Method called on LastConnectionDate value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the LastConnectionDate value is valid (format, value, etc).
		/// </param>
		partial void OnLastConnectionDateValidation(ref TranslationEnum? error);

		private bool ValidateLastConnectionDate()
		{
			bool isValid = false;

			do
			{
				TranslationEnum? error = null;

				this.OnLastConnectionDateValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("LastConnectionDate", error.Value);
					break;
				}

				base.RemoveValidationErrors("LastConnectionDate");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ Culture ]

		// Sets the default value defined in the database schema.
		private string _Culture = "EN";

		/// <summary>
		/// Gets or sets the Culture value (MANDATORY). The Culture must be 2 characters long
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string Culture
		{
			get { return _Culture; }
			set
			{
				if (value != _Culture)
				{
					_Culture = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateCulture();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Culture value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Culture value is valid (format, value, etc).
		/// </param>
		partial void OnCultureValidation(ref TranslationEnum? error);

		private bool ValidateCulture()
		{
			bool isValid = false;

			do
			{
				if (this.Culture == null)
				{
					base.AddValidationError("Culture", TranslationEnum.ModelUserCultureIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnCultureValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Culture", error.Value);
					break;
				}

				base.RemoveValidationErrors("Culture");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#endregion

		#region [ References ]

		private TCollection<UserRole> _UserRoleCollection = null;
		/// <summary>
		/// Referenced UserRole entity collection by this entity.
		/// </summary>
		[DataMember()]
		public virtual TCollection<UserRole> UserRoleCollection
		{
			get
			{
				if (_UserRoleCollection == null)
				{
					_UserRoleCollection = new TCollection<UserRole>();
				}

				return _UserRoleCollection;
			}
			set
			{
				_UserRoleCollection = value;
			}
		}

		#endregion

		#region [ EntityBase Implementation ]

		/// <summary>
		/// Gets the entity properties validity.
		/// </summary>
		/// 
		/// <param name="errors">
		/// Translation errors list (each item represents a translation key of an error).
		/// </param>
		/// 
		/// <returns>
		/// True if all the entity properties are correct; otherwise, false.
		/// </returns>
		public override bool IsValid(out IList<TranslationEnum> errors)
		{
			IList<TranslationEnum> errs = new List<TranslationEnum>();

			if (!this.ValidateUsername())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Username");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidatePassword())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Password");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateEmail())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Email");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidatePasswordQuestion())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("PasswordQuestion");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidatePasswordResponse())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("PasswordResponse");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateRegistrationDate())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("RegistrationDate");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateLastConnectionDate())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("LastConnectionDate");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateCulture())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Culture");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			errors = errs;

			return errors.Count == 0;
		}
		
		/// <summary>
		/// Fill the entity properties using a source.
		/// </summary>
		/// 
		/// <param name="source">
		/// Source.
		public override void Map(EntityBase source)
		{
			if (source == null)
			{
				ThrowException.ThrowArgumentNullException("source");
			}

			if (!(source is User))
			{
				ThrowException.ThrowArgumentException("The 'source' argument is not a 'User' instance");
			}

			this.Username = ((User)source).Username;
			this.Password = ((User)source).Password;
			this.Email = ((User)source).Email;
			this.PasswordQuestion = ((User)source).PasswordQuestion;
			this.PasswordResponse = ((User)source).PasswordResponse;
			this.RegistrationDate = ((User)source).RegistrationDate;
			this.LastConnectionDate = ((User)source).LastConnectionDate;
			this.Culture = ((User)source).Culture;

			this.Id = source.Id;
			this.State = source.State;
		}

		/// <summary>
		/// Fills the entity properties using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(IDataReader source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.Username = TypeHelper.To<string>(source[string.Format("{0}Username", columnPrefix)]);
			this.Password = TypeHelper.To<string>(source[string.Format("{0}Password", columnPrefix)]);
			this.Email = TypeHelper.To<string>(source[string.Format("{0}Email", columnPrefix)]);
			this.PasswordQuestion = TypeHelper.To<string>(source[string.Format("{0}PasswordQuestion", columnPrefix)]);
			this.PasswordResponse = TypeHelper.To<string>(source[string.Format("{0}PasswordResponse", columnPrefix)]);
			this.RegistrationDate = TypeHelper.To<DateTime>(source[string.Format("{0}RegistrationDate", columnPrefix)]);
			this.LastConnectionDate = TypeHelper.To<DateTime?>(source[string.Format("{0}LastConnectionDate", columnPrefix)]);
			this.Culture = TypeHelper.To<string>(source[string.Format("{0}Culture", columnPrefix)]);

			this.State = EntityState.None;
		}

		/// <summary>
		/// Fill the entity properties using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(DataRow source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.Username = TypeHelper.To<string>(source[string.Format("{0}Username", columnPrefix)]);
			this.Password = TypeHelper.To<string>(source[string.Format("{0}Password", columnPrefix)]);
			this.Email = TypeHelper.To<string>(source[string.Format("{0}Email", columnPrefix)]);
			this.PasswordQuestion = TypeHelper.To<string>(source[string.Format("{0}PasswordQuestion", columnPrefix)]);
			this.PasswordResponse = TypeHelper.To<string>(source[string.Format("{0}PasswordResponse", columnPrefix)]);
			this.RegistrationDate = TypeHelper.To<DateTime>(source[string.Format("{0}RegistrationDate", columnPrefix)]);
			this.LastConnectionDate = TypeHelper.To<DateTime?>(source[string.Format("{0}LastConnectionDate", columnPrefix)]);
			this.Culture = TypeHelper.To<string>(source[string.Format("{0}Culture", columnPrefix)]);

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fills the entity properties and all its dependencies using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(IDataReader source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			if (source.HasColumn(UserRole.ColumnNames.Id) && source[UserRole.ColumnNames.Id] != DBNull.Value)
			{
				if (!this.UserRoleCollection.Any(i => i.Id == (long)source[UserRole.ColumnNames.Id]))
				{
					var entity = new UserRole { IdUser = this.Id, User = this };
					entity.DeepMap(source, userContext);

					this.UserRoleCollection.Add(entity);
				}
			}

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fill the entity properties and all its dependencies using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(DataRow source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			if (source.HasColumn(UserRole.ColumnNames.Id) && source[UserRole.ColumnNames.Id] != DBNull.Value)
			{
				if (!this.UserRoleCollection.Any(i => i.Id == (long)source[UserRole.ColumnNames.Id]))
				{
					var entity = new UserRole { IdUser = this.Id, User = this };
					entity.DeepMap(source, userContext);

					this.UserRoleCollection.Add(entity);
				}
			}

			this.State = EntityState.None;
		}

		#endregion
	}
}