<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Models
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Data;
	using System.Diagnostics;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Xml.Serialization;

	using <#=Context.ProcessorContext.ProjectName#>.Core;

	/// <summary>
	/// Entity mapped to <#=Context.Table.Name#> DB table.
	/// </summary>
	[Serializable]
	[DataContract(Namespace = Globals.Namespace, IsReference = true)]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
<#
	if (Context.Table.IsOwnership)
	{
#>
	public partial class <#=Context.Table.Name#> : OwnershipEntityDecorator<<#=Context.Table.Name#>>, I<#=Context.Table.Name#>
<#
	}
	else
	{
#>
	public partial class <#=Context.Table.Name#> : EntityBase, I<#=Context.Table.Name#>
<#
	}
#>
	{
		/// <summary>
		/// Gets the name of the entity.
		/// </summary>
		public static readonly string EntityName = "<#=Context.Table.Name#>";

		#region [ Constructor ]

		/// <summary>
		/// Default constructor.
		/// </summary>
		public <#=Context.Table.Name#>()
			: base()
		{
			this.Initialize();
<#
	foreach (var column in Context.Table.Columns.Where(c => c.IsLanguageColumn))
	{
#>

			this.<#=column.CSharpPropertyName#>.PropertyChangedAddHandler(this.On<#=column.CSharpPropertyName#>PropertyChanged); // To be notified that something has changed in the <#=column.CSharpPropertyName#> property
<#
	}
#>
		}

		#endregion

		#region [ Events ]

<#
	foreach (var column in Context.Table.Columns.Where(c => c.IsLanguageColumn))
	{
#>
		private void On<#=column.CSharpPropertyName#>PropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (!_deserializing)
			{
				base.UpdateState();
				base.NotifyPropertyChanged("<#=column.CSharpPropertyName#>"); // Notify that <#=column.CSharpPropertyName#> property has changed (EN, FR, etc)
			}
		}

<#
	}
#>
		#endregion

		#region [ Column Names ]

		/// <summary>
		/// Contains the entity column names.
		/// </summary>
		public static partial class ColumnNames
		{
<#
	foreach (var column in Context.Table.Columns)
	{
#>
			/// <summary>
			/// Name of the <#=column.CSharpPropertyName#> column ("<#=column.Name#>").
			/// </summary>
			public static readonly string <#=column.CSharpPropertyName#> = "<#=column.Name#>";

<#
		if (column.IsLanguageColumn)
		{
			foreach (var languageColumn in column.LanguageColumns)
			{
#>
			/// <summary>
			/// Name of the <#=languageColumn.CSharpPropertyName#> column ("<#=languageColumn.Name#>").
			/// </summary>
			public static readonly string <#=languageColumn.CSharpPropertyName#> = "<#=languageColumn.Name#>";

<#
			}
		}

	}
#>
		}

		#endregion

		#region [ Property Names ]

		/// <summary>
		/// Contains the entity property names.
		/// </summary>
		public static partial class PropertyNames
		{
<#
	foreach (var column in Context.Table.Columns)
	{
#>
			/// <summary>
			/// Name of the <#=column.CSharpPropertyName#> property ("<#=column.CSharpPropertyName#>").
			/// </summary>
			public static readonly string <#=column.CSharpPropertyName#> = "<#=column.CSharpPropertyName#>";

<#
		if (column.IsLanguageColumn)
		{
			foreach (var languageColumn in column.LanguageColumns)
			{
#>
			/// <summary>
			/// Name of the <#=languageColumn.CSharpPropertyName#> property ("<#=languageColumn.CSharpPropertyName#>").
			/// </summary>
			public static readonly string <#=languageColumn.CSharpPropertyName#> = "<#=languageColumn.CSharpPropertyName#>";

<#
			}
		}

	}
#>
		}

		#endregion
<#
	if (Context.Table.HasCodeRefColumn)
	{
#>
	
		#region [ CodeRefs ]

		/// <summary>
		/// Contains the entity CodeRef values.
		/// </summary>
		public static partial class CodeRefs
		{
<#
		foreach (var codeRef in Context.Table.CodeRefs)
		{
#>
			/// <summary>
			/// CodeRef = "<#=codeRef.Value#>".
			/// </summary>
			public static readonly string <#=codeRef.Value#> = "<#=codeRef.Value#>";

<#
		}
#>
		}

		#endregion

		#region [ CodeRefEnum ]

		/// <summary>
		/// CodeRef values enumeration.
		/// </summary>
		[Serializable]
		[DataContract]
		public enum CodeRefEnum
		{
<#
		foreach (var codeRef in Context.Table.CodeRefs)
		{
#>
			[XmlEnum]
			[EnumMember]
			<#=codeRef.Value#> = <#=codeRef.Id#>,

<#
		}
#>
		}

		#endregion
<#
	}
#>

		#region [ Properties ]

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsIdColumn) continue;
		if (column.IsOwnershipColumn) continue;
#>
		#region [ <#=column.CSharpPropertyName#> ]

<#
		if (column.IsLanguageColumn)
		{
#>
		private LanguageCollection _<#=column.CSharpPropertyName#> = new LanguageCollection()
		{
<#
			for (int i = 0; i < column.DefaultValues.Length; i++)
			{
#>
			<#=column.DefaultValues[i].Culture#> = <#=column.DefaultValues[i].Value#><#if (i < column.DefaultValues.Length - 1) { #>,<# }#>

<#
			}
#>
		};
<#
		}
		else if (column.DefaultValue != null)
		{
#>
		// Sets the default value defined in the database schema.
		private <#=column.CSharpTypeName#> _<#=column.CSharpPropertyName#> = <#=column.DefaultValue#>;
<#
		}
		else
		{
#>
		private <#=column.CSharpTypeName#> _<#=column.CSharpPropertyName#>;
<#
		}
#>

		/// <summary>
		/// Gets or sets the <#=column.CSharpPropertyName#> value (<#=(!column.IsNullable) ? "MANDATORY" : "OPTIONAL"#>). <#=(column.Description != null) ? column.Description : ""#>
		/// </summary>
		[DebuggerHidden]
<#
		if (!column.IsNullable)
		{
#>
		[Required]
<#
		}
#>
		[DataMember(<#=SetDataMemberParameters(Context.ProcessorContext, !column.IsNullable)#>)]
<# 
		if (column.IsLanguageColumn)
		{
#>
		public virtual LanguageCollection <#=column.CSharpPropertyName#>
		{
			get { return _<#=column.CSharpPropertyName#>; }
			set
			{
				if (value != _<#=column.CSharpPropertyName#>)
				{
					if (_<#=column.CSharpPropertyName#> != null)
					{
						this.<#=column.CSharpPropertyName#>.PropertyChanged -= On<#=column.CSharpPropertyName#>PropertyChanged;
					}

					_<#=column.CSharpPropertyName#> = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.<#=column.CSharpPropertyName#>.PropertyChanged += On<#=column.CSharpPropertyName#>PropertyChanged;
					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.Validate<#=column.CSharpPropertyName#>();
					}
				}
			}
		}
<#
		}
		else
		{
#>
		public virtual <#=column.CSharpTypeName#> <#=column.CSharpPropertyName#>
		{
			get { return _<#=column.CSharpPropertyName#>; }
			set
			{
<#
			if (column.IsForeignKey)
			{
				if (column.IsNullable)
				{
#>
				if (value == 0)
					value = null;

<#
				}
#>
				if (value != _<#=column.CSharpPropertyName#>)
				{
					_<#=column.CSharpPropertyName#> = value;

					if (!_deserializing)
					{
						if (_<#=column.ForeignKey.CSharpPropertyName#> != null && _<#=column.CSharpPropertyName#> != _<#=column.ForeignKey.CSharpPropertyName#>.Id)
						{
							_<#=column.ForeignKey.CSharpPropertyName#> = null;
						}

						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.Validate<#=column.CSharpPropertyName#>();
					}
				}
<#
			}
			else
			{
#>
				if (value != _<#=column.CSharpPropertyName#>)
				{
					_<#=column.CSharpPropertyName#> = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.Validate<#=column.CSharpPropertyName#>();
					}
				}
<#
			}
#>
			}
		}
<#
		}

		if (!column.IsForeignKey)
		{
#>

		/// <summary>
		/// Method called on <#=column.CSharpPropertyName#> value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the <#=column.CSharpPropertyName#> value is valid (format, value, etc).
		/// </param>
		partial void On<#=column.CSharpPropertyName#>Validation(ref TranslationEnum? error);
<#
		}
#>

		private bool Validate<#=column.CSharpPropertyName#>()
		{
			bool isValid = false;

			do
			{
<#
		if (column.IsLanguageColumn)
		{
			if (!column.IsNullable)
			{
				foreach (string culture in Context.ProcessorContext.Culture.SupportedCultures)
				{
#>
				if (this.<#=column.CSharpPropertyName#>.<#=culture#> == null)
				{
					base.AddValidationError("<#=column.CSharpPropertyName#>", TranslationEnum.Model<#=Context.Table.Name#><#=column.CSharpPropertyName#>IsRequired);
					break;
				}

<#
				}
			}
		}
		else if (column.CSharpPropertyName == "CodeRef")
		{
#>
				if (string.IsNullOrEmpty(this.<#=column.CSharpPropertyName#>))
				{
					base.AddValidationError("<#=column.CSharpPropertyName#>", TranslationEnum.Model<#=Context.Table.Name#><#=column.CSharpPropertyName#>IsRequired);
					break;
				}

<#
		}
		else if (column.CSharpIsTypeNullable)
		{
			if (!column.IsNullable)
			{
#>
				if (this.<#=column.CSharpPropertyName#> == null)
				{
					base.AddValidationError("<#=column.CSharpPropertyName#>", TranslationEnum.Model<#=Context.Table.Name#><#=column.CSharpPropertyName#>IsRequired);
					break;
				}

<#
			}
		}
		else if (column.CSharpTypeName == "DateTime")
		{
#>
				if (this.<#=column.CSharpPropertyName#> == DateTime.MinValue)
				{
					base.AddValidationError("<#=column.CSharpPropertyName#>", TranslationEnum.Model<#=Context.Table.Name#><#=column.CSharpPropertyName#>IsRequired);
					break;
				}

<#
		}
		else if (column.IsForeignKey)
		{
			if (!column.IsNullable)
			{
#>
				if (this.<#=column.CSharpPropertyName#> <= 0 && this.<#=column.ForeignKey.CSharpPropertyName#> == null)
				{
					base.AddValidationError("<#=column.CSharpPropertyName#>", TranslationEnum.Model<#=Context.Table.Name#><#=column.CSharpPropertyName#>IsRequired);
					break;
				}

<#
			}
		}

		if (!column.IsForeignKey) // Not a FK -> can call partial method if defined
		{
#>
				TranslationEnum? error = null;

				this.On<#=column.CSharpPropertyName#>Validation(ref error);
				if (error != null)
				{
					base.AddValidationError("<#=column.CSharpPropertyName#>", error.Value);
					break;
				}
<#
		}
#>

				base.RemoveValidationErrors("<#=column.CSharpPropertyName#>");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

<#
	}
#>
		#endregion

		#region [ References ]

<#
	if (Context.Table.ZeroToOneRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToOneRelations)
		{
#>
		private <#=relation.ReferencedTableName#> _<#=relation.CSharpPropertyName#>;
		/// <summary>
		/// Referenced <#=relation.CSharpPropertyName#> entity by this entity.
		/// </summary>
		[DataMember(<#=WithEmitDefaultValueFalseOption(Context.ProcessorContext)#>)]
		public virtual <#=relation.ReferencedTableName#> <#=relation.CSharpPropertyName#>
		{
			get { return _<#=relation.CSharpPropertyName#>; }
			set
			{
				if (value != _<#=relation.CSharpPropertyName#>)
				{
					_<#=relation.CSharpPropertyName#> = value;

					if (!_deserializing)
					{
						if (_<#=relation.CSharpPropertyName#> == null)
						{
							_Id<#=relation.CSharpPropertyName#> = 0;
						}
						else if (_<#=relation.CSharpPropertyName#>.Id == 0)
						{
							if (_Id<#=relation.CSharpPropertyName#> != 0)
							{
								_Id<#=relation.CSharpPropertyName#> = 0;
							}
							else
							{
								base.UpdateState();
							}
						}
						else if (_<#=relation.CSharpPropertyName#>.Id != _Id<#=relation.CSharpPropertyName#>)
						{
							_Id<#=relation.CSharpPropertyName#> = _<#=relation.CSharpPropertyName#>.Id;
						}
					}
				}
			}
		}

<#
		}
	}

	if (Context.Table.ZeroToManyRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToManyRelations/*.Where(i => !i.IsLoop) -> commented to support hierarchied-entities */)
		{
#>
		private TCollection<<#=relation.ReferencedTableName#>> _<#=relation.CSharpPropertyName#>Collection = null;
		/// <summary>
		/// Referenced <#=relation.CSharpPropertyName#> entity collection by this entity.
		/// </summary>
		[DataMember(<#=WithEmitDefaultValueFalseOption(Context.ProcessorContext)#>)]
		public virtual TCollection<<#=relation.ReferencedTableName#>> <#=relation.CSharpPropertyName#>Collection
		{
			get
			{
				if (_<#=relation.CSharpPropertyName#>Collection == null)
				{
					_<#=relation.CSharpPropertyName#>Collection = new TCollection<<#=relation.ReferencedTableName#>>();
				}

				return _<#=relation.CSharpPropertyName#>Collection;
			}
			set
			{
				_<#=relation.CSharpPropertyName#>Collection = value;
			}
		}

<#
		}
	}
#>
		#endregion

		#region [ EntityBase Implementation ]

		/// <summary>
		/// Gets the entity properties validity.
		/// </summary>
		/// 
		/// <param name="errors">
		/// Translation errors list (each item represents a translation key of an error).
		/// </param>
		/// 
		/// <returns>
		/// True if all the entity properties are correct; otherwise, false.
		/// </returns>
		public override bool IsValid(out IList<TranslationEnum> errors)
		{
			IList<TranslationEnum> errs = new List<TranslationEnum>();
<#
		foreach (var column in Context.Table.Columns)
		{
			if (column.IsIdColumn || column.IsOwnershipColumn)
			{
				continue;
			}
#>

			if (!this.Validate<#=column.CSharpPropertyName#>())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("<#=column.CSharpPropertyName#>");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}
<#
		}
#>

			errors = errs;

			return errors.Count == 0;
		}
		
		/// <summary>
		/// Fill the entity properties using a source.
		/// </summary>
		/// 
		/// <param name="source">
		/// Source.
		public override void Map(EntityBase source)
		{
			if (source == null)
			{
				ThrowException.ThrowArgumentNullException("source");
			}

			if (!(source is <#=Context.Table.Name#>))
			{
				ThrowException.ThrowArgumentException("The 'source' argument is not a '<#=Context.Table.Name#>' instance");
			}

<#
	foreach (var column in Context.Table.Columns.Where(i => !i.IsIdColumn))
	{
		if (column.IsLanguageColumn)
		{
#>
			this.<#=column.CSharpPropertyName#> = new LanguageCollection(((<#=Context.Table.Name#>)source).<#=column.CSharpPropertyName#>);
<#
		}
		else
		{
#>
			this.<#=column.CSharpPropertyName#> = ((<#=Context.Table.Name#>)source).<#=column.CSharpPropertyName#>;
<#
		}
	}
#>

			this.Id = source.Id;
			this.State = source.State;
		}

		/// <summary>
		/// Fills the entity properties using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(IDataReader source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsLanguageColumn)
		{
#>
			this.<#=column.CSharpPropertyName#> = LanguageCollectionHelper.Map(source, "<#=column.CSharpPropertyName#>", userContext, columnPrefix);
<#
		}
		else
		{
#>
			this.<#=column.CSharpPropertyName#> = TypeHelper.To<<#=column.CSharpTypeName#>>(source[string.Format("{0}<#=column.CSharpPropertyName#>", columnPrefix)]);
<#
		}
	}
#>

			this.State = EntityState.None;
		}

		/// <summary>
		/// Fill the entity properties using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(DataRow source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

<#
	foreach (var column in Context.Table.Columns)
	{
		if (column.IsLanguageColumn)
		{
#>
			this.<#=column.CSharpPropertyName#> = LanguageCollectionHelper.Map(source, "<#=column.CSharpPropertyName#>", userContext, columnPrefix);
<#
		}
		else
		{
#>
			this.<#=column.CSharpPropertyName#> = TypeHelper.To<<#=column.CSharpTypeName#>>(source[string.Format("{0}<#=column.CSharpPropertyName#>", columnPrefix)]);
<#
		}
	}
#>

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fills the entity properties and all its dependencies using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(IDataReader source, IUserContext userContext = null)
		{
			this.Map(source, userContext);
<#
	if (Context.Table.ZeroToOneRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToOneRelations.Where(i => !i.IsLoop))
		{
			var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.TableName, relation.ReferencedTableName), "");
#>

			if (this.<#=relation.CSharpPropertyName#> == null &&
				source.HasColumn(<#=relation.ReferencedTableName#>.ColumnNames.Id) && source[<#=relation.ReferencedTableName#>.ColumnNames.Id] != DBNull.Value)
			{
				this.<#=relation.CSharpPropertyName#> = new <#=relation.ReferencedTableName#>();
				this.<#=relation.CSharpPropertyName#>.<#=relation.TableName#><#=suffix#>Collection.Add(this);

				this.<#=relation.CSharpPropertyName#>.DeepMap(source, userContext);

				this.Id<#=relation.CSharpPropertyName#> = this.<#=relation.CSharpPropertyName#>.Id;
			}
<#
		}
	}

	if (Context.Table.ZeroToManyRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
		{
			var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.ReferencedTableName, relation.TableName), "");
#>

			if (source.HasColumn(<#=relation.ReferencedTableName#>.ColumnNames.Id) && source[<#=relation.ReferencedTableName#>.ColumnNames.Id] != DBNull.Value)
			{
				if (!this.<#=relation.CSharpPropertyName#>Collection.Any(i => i.Id == (long)source[<#=relation.ReferencedTableName#>.ColumnNames.Id]))
				{
					var entity = new <#=relation.ReferencedTableName#> { Id<#=relation.TableName#><#=suffix#> = this.Id, <#=relation.TableName#><#=suffix#> = this };
					entity.DeepMap(source, userContext);

					this.<#=relation.CSharpPropertyName#>Collection.Add(entity);
				}
			}
<#
		}
	}
#>

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fill the entity properties and all its dependencies using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(DataRow source, IUserContext userContext = null)
		{
			this.Map(source, userContext);
<#
	if (Context.Table.ZeroToOneRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToOneRelations.Where(i => !i.IsLoop))
		{
			var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.TableName, relation.ReferencedTableName), "");
#>

			if (this.<#=relation.CSharpPropertyName#> == null &&
				source.HasColumn(<#=relation.ReferencedTableName#>.ColumnNames.Id) && source[<#=relation.ReferencedTableName#>.ColumnNames.Id] != DBNull.Value)
			{
				this.<#=relation.CSharpPropertyName#> = new <#=relation.ReferencedTableName#>();
				this.<#=relation.CSharpPropertyName#>.<#=relation.TableName#><#=suffix#>Collection.Add(this);

				this.<#=relation.CSharpPropertyName#>.DeepMap(source, userContext);
			}
<#
		}
	}

	if (Context.Table.ZeroToManyRelations != null)
	{
		foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
		{
			var suffix = relation.ColumnName.Replace(string.Format("{0}_Id{1}", relation.ReferencedTableName, relation.TableName), "");
#>

			if (source.HasColumn(<#=relation.ReferencedTableName#>.ColumnNames.Id) && source[<#=relation.ReferencedTableName#>.ColumnNames.Id] != DBNull.Value)
			{
				if (!this.<#=relation.CSharpPropertyName#>Collection.Any(i => i.Id == (long)source[<#=relation.ReferencedTableName#>.ColumnNames.Id]))
				{
					var entity = new <#=relation.ReferencedTableName#> { Id<#=relation.TableName#><#=suffix#> = this.Id, <#=relation.TableName#><#=suffix#> = this };
					entity.DeepMap(source, userContext);

					this.<#=relation.CSharpPropertyName#>Collection.Add(entity);
				}
			}
<#
		}
	}
#>

			this.State = EntityState.None;
		}

<#
	if (Context.Table.Columns.Any(c => c.IsLanguageColumn))
	{
#>
		protected override void OnPostDeserialized()
		{
<#
		foreach (var column in Context.Table.Columns.Where(c => c.IsLanguageColumn))
		{
#>
			this.<#=column.CSharpPropertyName#>.PropertyChanged += On<#=column.CSharpPropertyName#>PropertyChanged;
<#
		}

#>
		}
<#
	}
#>
		#endregion
	}
}