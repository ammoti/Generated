//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file WILL NOT BE LOST if the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Business
{
	using System;
	using System.Linq;
	using System.ServiceModel;

	using VahapYigit.Test.Core;
	using VahapYigit.Test.Crud;
	using VahapYigit.Test.Models;

	/// <summary>
	/// This class contains AppSettings business methods.
	/// </summary>
	[BusinessClass]
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession)]
	public class AppSettingsBusiness : BusinessBase
	{
		#region [ Constants ]

		private static readonly int CACHE_DELAY_IN_MINS = 30;

		#endregion

		#region [ Members ]

		private static readonly object _locker = new object();

		#endregion

		#region [ Custom public methods ]

		/// <summary>
		/// Gets an AppSettings item given its key.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="key">
		/// Key of the AppSettings to get.
		/// </param>
		/// 
		/// <returns>
		/// The AppSettings item.
		/// </returns>
		[BusinessMethod]
		public AppSettings GetByKey(IUserContext userContext, string key)
		{
			return GetAppSettingsCollection(userContext).FirstOrDefault(i => i.Key == key);
		}

		[BusinessMethod]
		public string GetStringValue(IUserContext userContext, string key, string defaultValue = null)
		{
			return this.GetValue<string>(userContext, key, defaultValue);
		}

		[BusinessMethod]
		public bool GetBoolValue(IUserContext userContext, string key, bool defaultValue = false)
		{
			return this.GetValue<bool>(userContext, key, defaultValue);
		}

		[BusinessMethod]
		public short GetShortValue(IUserContext userContext, string key, short defaultValue = 0)
		{
			return this.GetValue<short>(userContext, key, defaultValue);
		}

		[BusinessMethod]
		public int GetIntValue(IUserContext userContext, string key, int defaultValue = 0)
		{
			return this.GetValue<int>(userContext, key, defaultValue);
		}

		[BusinessMethod]
		public long GetLongValue(IUserContext userContext, string key, long defaultValue = 0)
		{
			return this.GetValue<long>(userContext, key, defaultValue);
		}

		// Cannot be BusinessMethod due to the T return
		public T GetValue<T>(IUserContext userContext, string key, T defaultValue = default(T))
		{
			var item = this.GetByKey(userContext, key);
			return (item != null) ? TypeHelper.To<T>(item.Value) : defaultValue;
		}

		#endregion

		#region [ Custom private methods ]

		/// <summary>
		/// Gets all the AppSettings items from the cache or the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <returns>
		/// Collection of all the AppSettings items.
		/// </returns>
		private static TCollection<AppSettings> GetAppSettingsCollection(IUserContext userContext)
		{
			const string cacheKey = "AppSettingsBusiness.GetAppSettingsCollection";

			var collection = CacheServiceHelper.Current.Get<TCollection<AppSettings>>(cacheKey);
			if (collection == null)
			{
				lock (_locker)
				{
					if (collection == null)
					{
						using (var et = new ExecutionTracerService())
						using (var db = new AppSettingsCrud(userContext))
						{
							var options = new SearchOptions();

							collection = db.Search(ref options);
						}

						CacheServiceHelper.Current.Add(new CacheItem
						{
							Key = cacheKey,
							Data = collection,
							Expiration = DateTime.Now.AddMinutes(CACHE_DELAY_IN_MINS)
						});
					}
				}
			}

			return collection;
		}

		#endregion
	}
}