<#+
	string ToMemberName(string value)
	{
		return string.Format("{0}{1}", 
			value[0].ToString().ToLowerInvariant(), 
			value.Substring(1));
	}
	
	bool WithStartSeparator(bool? withSeparator)
	{
		return (withSeparator == null) ? false : true;
	}

	void WriteIndentLine(int tabNumber, string line)
	{
		for (int i = 0; i < tabNumber; i++)
		{
			this.Write("\t");
		}

		this.WriteLine(line);
	}

	void WriteIndentLine(int tabNumber, string line, params object[] args)
	{
		for (int i = 0; i < tabNumber; i++)
		{
			this.Write("\t");
		}

		this.WriteLine(line, args);
	}

	string GetWebServicesRootUrl(ProcessorContext context)
	{
		return context.WebServices.WithWcfSecurity ?
			context.WebServices.SecureRootUrl :
			context.WebServices.StandardRootUrl;
	}

	string GetWebServicesMexHttpBinding(ProcessorContext context)
	{
		return context.WebServices.WithWcfSecurity ?
			"mexHttpsBinding" :
			"mexHttpBinding";
	}

	string GetWebServicesBindingConfiguration(ProcessorContext context)
	{
		return context.WebServices.WithWcfSecurity ?
			"secureBinding" :
			"defaultBinding";
	}

	string GetWebServicesEndpointBehaviorConfiguration(ProcessorContext context)
	{
		return context.WebServices.WithWcfSecurity ?
			"secureEndpointBehavior" :
			"defaultEndpointBehavior";
	}

	string GetWebServicesServiceBehaviorConfiguration(ProcessorContext context)
	{
		return context.WebServices.WithWcfSecurity ?
			"secureServiceBehavior" :
			"defaultServiceBehavior";
	}

	string WithNoLockOption(ProcessorContext context)
	{
		return context.AdvancedOptions.WithNoLockOption ? "WITH(NOLOCK)" : string.Empty;
	}

	string WithEmitDefaultValueFalseOption(ProcessorContext context)
	{
		return context.AdvancedOptions.WithEmitDefaultValueFalseOption ? "EmitDefaultValue = false" : string.Empty;
	}

	string SetDataMemberParameters(ProcessorContext context, bool isRequired)
	{
		IList<string> parameters = new List<string>();

		/*if (isRequired)
		{
			parameters.Add("IsRequired = true"); --> not supported when using [DataContract(IsReference = true)]...
		}*/

		if (context.AdvancedOptions.WithEmitDefaultValueFalseOption)
		{
			parameters.Add("EmitDefaultValue = false");
		}

		return string.Join(", ", parameters);
	}

	string GetOperationSecurityParametersInLine(BusinessMethodInfo businessMethodInfo)
	{
		string inLine = null;

		IList<string> roles = businessMethodInfo.OperationSecurityAttribute.Roles;
		if (roles != null)
		{
			for (int i = 0; i < roles.Count; i++)
			{
				inLine = string.Concat(inLine,
					string.Format("\"{0}\"", roles[i]));

				if (i < roles.Count - 1)
				{
					inLine = string.Concat(inLine, ", ");
				}
			}
		}

		return inLine;
	}

	string GetCachingOperationParametersInLine(BusinessMethodInfo businessMethodInfo)
	{
		StringBuilder sbInLine = new StringBuilder(128);
		
		if (businessMethodInfo.CachingOperationAttribute.WithUserContextDependency)
		{
			sbInLine.Append("WithUserContextDependency = true, ");
		}
		
		if (businessMethodInfo.CachingOperationAttribute.KeyGeneratorType != null)
		{
			sbInLine.AppendFormat("KeyGeneratorType = typeof({0}), ",
				businessMethodInfo.CachingOperationAttribute.KeyGeneratorType.ToString().Replace("+", "."));
		}

		TimeSpan tSpan = TimeSpan.FromSeconds(businessMethodInfo.CachingOperationAttribute.TotalInSeconds);

		if (tSpan.Days != 0)
		{
			sbInLine.AppendFormat("Days = {0}, ", tSpan.Days);
		}

		if (tSpan.Hours != 0)
		{
			sbInLine.AppendFormat("Hours = {0}, ", tSpan.Hours);
		}
		
		if (tSpan.Minutes != 0)
		{
			sbInLine.AppendFormat("Minutes = {0}, ", tSpan.Minutes);
		}

		if (tSpan.Seconds != 0)
		{
			sbInLine.AppendFormat("Seconds = {0}, ", tSpan.Seconds);
		}

		string inLine = sbInLine.ToString();

		if (inLine.Length != 0 && inLine.EndsWith(", "))
		{
			inLine = inLine.Substring(0, inLine.Length - 2);
		}

		return inLine;
	}

	string GetOperationBehaviorParametersInLine(BusinessMethodInfo businessMethodInfo)
	{
		StringBuilder sbInLine = new StringBuilder(128);
		
		if (businessMethodInfo.OperationBehaviorAttribute != null)
		{
			OperationBehaviorAttribute defaultInstance = new OperationBehaviorAttribute();

			if (businessMethodInfo.OperationBehaviorAttribute.AutoDisposeParameters != defaultInstance.AutoDisposeParameters)
			{
				sbInLine.AppendFormat("AutoDisposeParameters = {0}, ", 
					businessMethodInfo.OperationBehaviorAttribute.AutoDisposeParameters.ToString().ToLowerInvariant());
			}

			if (businessMethodInfo.OperationBehaviorAttribute.Impersonation != defaultInstance.Impersonation)
			{
				sbInLine.AppendFormat("Impersonation = ImpersonationOption.{0}, ",
					businessMethodInfo.OperationBehaviorAttribute.Impersonation);
			}

			if (businessMethodInfo.OperationBehaviorAttribute.ReleaseInstanceMode != defaultInstance.ReleaseInstanceMode)
			{
				sbInLine.AppendFormat("ReleaseInstanceMode = ReleaseInstanceMode.{0}, ",
					businessMethodInfo.OperationBehaviorAttribute.ReleaseInstanceMode);
			}

			if (businessMethodInfo.OperationBehaviorAttribute.TransactionAutoComplete != defaultInstance.TransactionAutoComplete)
			{
				sbInLine.AppendFormat("TransactionAutoComplete = {0}, ", 
					businessMethodInfo.OperationBehaviorAttribute.TransactionAutoComplete.ToString().ToLowerInvariant());
			}

			if (businessMethodInfo.OperationBehaviorAttribute.TransactionScopeRequired != defaultInstance.TransactionScopeRequired)
			{
				sbInLine.AppendFormat("TransactionScopeRequired = {0}, ", 
					businessMethodInfo.OperationBehaviorAttribute.TransactionScopeRequired.ToString().ToLowerInvariant());
			}
		}

		string inLine = sbInLine.ToString();

		if (inLine.Length != 0 && inLine.EndsWith(", "))
		{
			inLine = inLine.Substring(0, inLine.Length - 2);
		}

		return inLine;
	}

	bool HasOperationBehaviorParametersInLine(BusinessMethodInfo businessMethodInfo)
	{
		return !string.IsNullOrEmpty(GetOperationBehaviorParametersInLine(businessMethodInfo));
	}

	string GetTransactionFlowParametersInLine(BusinessMethodInfo businessMethodInfo)
	{
		StringBuilder sbInLine = new StringBuilder(128);
		
		if (businessMethodInfo.TransactionFlowAttribute != null)
		{
			sbInLine.AppendFormat("TransactionFlowOption.{0}, ", 
				businessMethodInfo.TransactionFlowAttribute.Transactions);
		}

		string inLine = sbInLine.ToString();

		if (inLine.Length != 0 && inLine.EndsWith(", "))
		{
			inLine = inLine.Substring(0, inLine.Length - 2);
		}

		return inLine;
	}

	bool HasTransactionFlowParametersInLine(BusinessMethodInfo businessMethodInfo)
	{
		return !string.IsNullOrEmpty(GetTransactionFlowParametersInLine(businessMethodInfo));
	}

	string GetOperationContractParametersInLine(BusinessMethodInfo businessMethodInfo, bool isAsync)
	{
		StringBuilder sbInLine = new StringBuilder(128);
		OperationContractAttribute defaultInstance = new OperationContractAttribute();

		string name = businessMethodInfo.Method.Name;

		if (businessMethodInfo.OperationContractAttribute != null)
		{
			if (businessMethodInfo.OperationContractAttribute.Name != defaultInstance.Name)
			{
				name = businessMethodInfo.OperationContractAttribute.Name;
			}
		}

		if (isAsync && !name.ToUpperInvariant().EndsWith("ASYNC"))
		{
			name = string.Format("{0}Async", name);
		}
		
		sbInLine.AppendFormat("Name = \"{0}\", ", name);

		if (businessMethodInfo.OperationContractAttribute != null)
		{
			if (businessMethodInfo.OperationContractAttribute.Action != defaultInstance.Action)
			{
				sbInLine.AppendFormat("Action = \"{0}\", ",
					businessMethodInfo.OperationContractAttribute.Action);
			}

			if (businessMethodInfo.OperationContractAttribute.AsyncPattern != defaultInstance.AsyncPattern)
			{
				sbInLine.AppendFormat("AsyncPattern = {0}, ", 
					businessMethodInfo.OperationContractAttribute.AsyncPattern.ToString().ToLowerInvariant());
			}

			if (businessMethodInfo.OperationContractAttribute.IsInitiating != defaultInstance.IsInitiating)
			{
				sbInLine.AppendFormat("IsInitiating = {0}, ", 
					businessMethodInfo.OperationContractAttribute.IsInitiating.ToString().ToLowerInvariant());
			}

			if (businessMethodInfo.OperationContractAttribute.IsOneWay != defaultInstance.IsOneWay)
			{
				sbInLine.AppendFormat("IsOneWay = {0}, ", 
					businessMethodInfo.OperationContractAttribute.IsOneWay.ToString().ToLowerInvariant());
			}

			if (businessMethodInfo.OperationContractAttribute.IsTerminating != defaultInstance.IsTerminating)
			{
				sbInLine.AppendFormat("IsTerminating = {0}, ", 
					businessMethodInfo.OperationContractAttribute.IsTerminating.ToString().ToLowerInvariant());
			}

			if (businessMethodInfo.OperationContractAttribute.ProtectionLevel != defaultInstance.ProtectionLevel)
			{
				sbInLine.AppendFormat("ProtectionLevel = ProtectionLevel.{0}, ",
					businessMethodInfo.OperationContractAttribute.ProtectionLevel);
			}

			if (businessMethodInfo.OperationContractAttribute.ReplyAction != defaultInstance.ReplyAction)
			{
				sbInLine.AppendFormat("ReplyAction = \"{0}\", ",
					businessMethodInfo.OperationContractAttribute.ReplyAction);
			}
		}
		
		string inLine = sbInLine.ToString();

		if (inLine.Length != 0 && inLine.EndsWith(", "))
		{
			inLine = inLine.Substring(0, inLine.Length - 2);
		}

		return inLine;
	}

	string GetServiceBehaviorParametersInLine(BusinessClassInfo businessClassInfo)
	{
		StringBuilder sbInLine = new StringBuilder(128);
		ServiceBehaviorAttribute defaultInstance = new ServiceBehaviorAttribute();

		InstanceContextMode instanceContextMode = InstanceContextMode.PerSession;

		if (businessClassInfo != null &&
			businessClassInfo.ServiceBehaviorAttribute != null)
		{
			instanceContextMode = businessClassInfo.ServiceBehaviorAttribute.InstanceContextMode;
		}

		sbInLine.AppendFormat("InstanceContextMode = InstanceContextMode.{0}, ", instanceContextMode);

		if (businessClassInfo != null &&
			businessClassInfo.ServiceBehaviorAttribute != null)
		{
			if (businessClassInfo.ServiceBehaviorAttribute.AddressFilterMode != defaultInstance.AddressFilterMode)
			{
				sbInLine.AppendFormat("AddressFilterMode = AddressFilterMode.{0}, ",
					businessClassInfo.ServiceBehaviorAttribute.AddressFilterMode);
			}

			if (businessClassInfo.ServiceBehaviorAttribute.AutomaticSessionShutdown != defaultInstance.AutomaticSessionShutdown)
			{
				sbInLine.AppendFormat("AutomaticSessionShutdown = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.AutomaticSessionShutdown.ToString().ToLowerInvariant());
			}

			if (businessClassInfo.ServiceBehaviorAttribute.ConcurrencyMode != defaultInstance.ConcurrencyMode)
			{
				sbInLine.AppendFormat("ConcurrencyMode = ConcurrencyMode.{0}, ",
					businessClassInfo.ServiceBehaviorAttribute.ConcurrencyMode);
			}

			if (businessClassInfo.ServiceBehaviorAttribute.ConfigurationName != defaultInstance.ConfigurationName)
			{
				sbInLine.AppendFormat("ConfigurationName = \"{0}\", ",
					businessClassInfo.ServiceBehaviorAttribute.ConfigurationName);
			}

			// 'System.ServiceModel.ServiceBehaviorAttribute' ne contient pas une définition pour 'EnsureOrderedDispatch' et aucune méthode
			// d'extension 'EnsureOrderedDispatch' acceptant un premier argument de type 'System.ServiceModel.ServiceBehaviorAttribute'
			// n'a été trouvée (une directive using ou une référence d'assembly est-elle manquante ?)

			/*if (businessClassInfo.ServiceBehaviorAttribute.EnsureOrderedDispatch != defaultInstance.EnsureOrderedDispatch)
			{
				sbInLine.AppendFormat("EnsureOrderedDispatch = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.EnsureOrderedDispatch.ToString().ToLowerInvariant());
			}*/

			if (businessClassInfo.ServiceBehaviorAttribute.IgnoreExtensionDataObject != defaultInstance.IgnoreExtensionDataObject)
			{
				sbInLine.AppendFormat("IgnoreExtensionDataObject = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.IgnoreExtensionDataObject.ToString().ToLowerInvariant());
			}

			if (businessClassInfo.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults != defaultInstance.IncludeExceptionDetailInFaults)
			{
				sbInLine.AppendFormat("IncludeExceptionDetailInFaults = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults.ToString().ToLowerInvariant());
			}

			if (businessClassInfo.ServiceBehaviorAttribute.MaxItemsInObjectGraph != defaultInstance.MaxItemsInObjectGraph)
			{
				sbInLine.AppendFormat("MaxItemsInObjectGraph = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.MaxItemsInObjectGraph);
			}

			if (businessClassInfo.ServiceBehaviorAttribute.Name != defaultInstance.Name)
			{
				sbInLine.AppendFormat("Name = \"{0}\", ",
					businessClassInfo.ServiceBehaviorAttribute.Name);
			}

			if (businessClassInfo.ServiceBehaviorAttribute.Namespace != defaultInstance.Namespace)
			{
				sbInLine.AppendFormat("Namespace = \"{0}\", ",
					businessClassInfo.ServiceBehaviorAttribute.Namespace);
			}

			if (businessClassInfo.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete != defaultInstance.ReleaseServiceInstanceOnTransactionComplete)
			{
				sbInLine.AppendFormat("ReleaseServiceInstanceOnTransactionComplete = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete.ToString().ToLowerInvariant());
			}

			if (businessClassInfo.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose != defaultInstance.TransactionAutoCompleteOnSessionClose)
			{
				sbInLine.AppendFormat("TransactionAutoCompleteOnSessionClose = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose.ToString().ToLowerInvariant());
			}

			if (businessClassInfo.ServiceBehaviorAttribute.TransactionIsolationLevel != defaultInstance.TransactionIsolationLevel)
			{
				sbInLine.AppendFormat("TransactionIsolationLevel = IsolationLevel.{0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.TransactionIsolationLevel.ToString().ToLowerInvariant());
			}

			if (businessClassInfo.ServiceBehaviorAttribute.TransactionTimeout != defaultInstance.TransactionTimeout)
			{
				sbInLine.AppendFormat("TransactionTimeout = \"{0}\", ",
					businessClassInfo.ServiceBehaviorAttribute.TransactionTimeout);
			}

			if (businessClassInfo.ServiceBehaviorAttribute.UseSynchronizationContext != defaultInstance.UseSynchronizationContext)
			{
				sbInLine.AppendFormat("UseSynchronizationContext = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.UseSynchronizationContext.ToString().ToLowerInvariant());
			}

			if (businessClassInfo.ServiceBehaviorAttribute.ValidateMustUnderstand != defaultInstance.ValidateMustUnderstand)
			{
				sbInLine.AppendFormat("ValidateMustUnderstand = {0}, ", 
					businessClassInfo.ServiceBehaviorAttribute.ValidateMustUnderstand.ToString().ToLowerInvariant());
			}
		}

		string inLine = sbInLine.ToString();

		if (inLine.Length != 0 && inLine.EndsWith(", "))
		{
			inLine = inLine.Substring(0, inLine.Length - 2);
		}

		return inLine;
	}

	string GetServiceContractParametersInLine(string projectName, BusinessClassInfo businessClassInfo)
	{
		StringBuilder sbInLine = new StringBuilder(128);
		ServiceContractAttribute defaultInstance = new ServiceContractAttribute();
		
		string ns = string.Format("{0}.Core.Globals.Namespace", projectName);

		if (businessClassInfo != null &&
			businessClassInfo.ServiceContractAttribute != null)
		{
			if (businessClassInfo.ServiceContractAttribute.Namespace != defaultInstance.Namespace)
			{
				ns = businessClassInfo.ServiceContractAttribute.Namespace;
			}
		}
		
		sbInLine.AppendFormat("Namespace = {0}, ", ns);

		if (businessClassInfo != null &&
			businessClassInfo.ServiceContractAttribute != null)
		{
			if (businessClassInfo.ServiceContractAttribute.CallbackContract != defaultInstance.CallbackContract)
			{
				sbInLine.AppendFormat("CallbackContract = typeof({0}), ",
					businessClassInfo.ServiceContractAttribute.CallbackContract);
			}
		
			if (businessClassInfo.ServiceContractAttribute.Name != defaultInstance.Name)
			{
				sbInLine.AppendFormat("Name = \"{0}\", ",
					businessClassInfo.ServiceContractAttribute.Name);
			}

			if (businessClassInfo.ServiceContractAttribute.ProtectionLevel != defaultInstance.ProtectionLevel)
			{
				sbInLine.AppendFormat("ProtectionLevel = ProtectionLevel.{0}, ",
					businessClassInfo.ServiceContractAttribute.ProtectionLevel);
			}

			if (businessClassInfo.ServiceContractAttribute.SessionMode != defaultInstance.SessionMode)
			{
				sbInLine.AppendFormat("SessionMode = SessionMode.{0}, ",
					businessClassInfo.ServiceContractAttribute.SessionMode);
			}
		}

		string inLine = sbInLine.ToString();

		if (inLine.Length != 0 && inLine.EndsWith(", "))
		{
			inLine = inLine.Substring(0, inLine.Length - 2);
		}

		return inLine;
	}
	
	string GetSignature(PropertyInfo property)
	{
		var getter = property.GetGetMethod();
		var setter = property.GetSetMethod();

		var sbSignature = new StringBuilder();
		var primaryDef = LeastRestrictiveVisibility(getter, setter);

		BuildReturnSignature(sbSignature, primaryDef, false);
		sbSignature.Append(" { ");

		if (getter != null)
		{
			if (primaryDef != getter)
			{
				sbSignature.Append(GetAccessModifier(getter) + " ");
			}

			sbSignature.Append("get; ");
		}
		if (setter != null)
		{
			if (primaryDef != setter)
			{
				sbSignature.Append(GetAccessModifier(setter) + " ");
			}

			sbSignature.Append("set; ");
		}

		sbSignature.Append("}");
		return sbSignature.ToString();
	}

	string GetSignature(MethodInfo method, bool callable)
	{
		var sbSignature = new StringBuilder();

		BuildReturnSignature(sbSignature, method, callable);

		sbSignature.Append("(");

		var firstParam = true;
		var secondParam = false;
		var parameters = method.GetParameters();

		foreach (var param in parameters)
		{
			if (firstParam)
			{
				firstParam = false;
				if (method.IsDefined(typeof(System.Runtime.CompilerServices.ExtensionAttribute), false))
				{
					if (callable)
					{
						secondParam = true;
						continue;
					}

					sbSignature.Append("this ");
				}
			}
			else if (secondParam == true)
			{
				secondParam = false;
			}
			else
			{
				sbSignature.Append(", ");
			}
			if (param.IsOut)
			{
				sbSignature.Append("out ");
			}
			else if (param.ParameterType.IsByRef)
			{
				sbSignature.Append("ref ");
			}

			if (IsParamArray(param) && !callable)
			{
				sbSignature.Append("params ");
			}

			if (!callable)
			{
				sbSignature.Append(TypeName(param.ParameterType));
				sbSignature.Append(' ');
			}

			sbSignature.Append(param.Name);

			if (param.IsOptional && !callable)
			{
				if (param.ParameterType.IsGenericParameter)
				{
					sbSignature.AppendFormat(" = {0}", (param.DefaultValue ?? "default(T)"));
				}
				else
				{
					if (param.DefaultValue is bool)
					{
						sbSignature.AppendFormat(" = {0}", param.DefaultValue.ToString().ToLowerInvariant());
					}
					else
					{
						sbSignature.AppendFormat(" = {0}", (param.DefaultValue ?? "null"));
					}
				}
			}
		}

		sbSignature.Append(")");

		foreach (var arg in method.GetGenericArguments())
		{
			List<string> constraints = new List<string>();
			foreach (var constraint in arg.GetGenericParameterConstraints())
			{
				constraints.Add(TypeName(constraint));
			}

			var attrs = arg.GenericParameterAttributes;

			if (attrs.HasFlag(GenericParameterAttributes.ReferenceTypeConstraint))
			{
				constraints.Add("class");
			}

			if (attrs.HasFlag(GenericParameterAttributes.NotNullableValueTypeConstraint))
			{
				constraints.Add("struct");
			}

			if (attrs.HasFlag(GenericParameterAttributes.DefaultConstructorConstraint))
			{
				constraints.Add("new()");
			}

			if (constraints.Count > 0)
			{
				sbSignature.Append(" where " + TypeName(arg) + ": " + string.Join(", ", constraints));
			}
		}

		return sbSignature.ToString();
	}

	string GetSignatureAsync(MethodInfo method, bool callable)
	{
		string[] c1 = GetSignature(method, false).Split(new char[] { ' ' }, 3);
		string[] c2 = c1[2].Split(new char[] { '(' }, 2);

		if (callable)
		{
			throw new NotImplementedException("MethodInfoExtensions::GetSignatureAsync(callable = true)");
		}

		if (IsVoidReturnType(method.ReturnType))
		{
			return string.Format("{0} async Task {1}Async({2}", c1[0], c2[0], c2[1]);
		}
		else
		{
			return string.Format("{0} async Task<{1}> {2}Async({3}", c1[0], c1[1], c2[0], c2[1]);
		}
	}

	string GetContractSignature(MethodInfo method)
	{
		string[] signature = GetSignature(method, false).Split(new char[] { ' ' }, 2);
		return signature[1];
	}

	string TypeName(Type type)
	{
		var nullableType = Nullable.GetUnderlyingType(type);
		if (nullableType != null)
		{
			return TypeName(nullableType) + "?";
		}

		if (!type.IsGenericType && !type.Name.Contains("`"))
		{
			if (type.IsArray)
			{
				return TypeName(type.GetElementType()) + "[]";
			}

			switch (type.Name)
			{
				case "String":
					return "string";
				case "Int16":
					return "short";
				case "UInt16":
					return "ushort";
				case "Int32":
					return "int";
				case "UInt32":
					return "uint";
				case "Int64":
					return "long";
				case "UInt64":
					return "ulong";
				case "Decimal":
					return "decimal";
				case "Double":
					return "double";
				case "Boolean":
					return "bool";
				case "Object":
					return "object";
				case "Void":
					return "void";

				default:
					string typeName = string.IsNullOrWhiteSpace(type.FullName) ? type.Name : type.FullName;

					if (typeName.EndsWith("&"))
					{
						typeName = typeName.Substring(0, typeName.Length - 1);
					}

					typeName = typeName.Replace('+', '.');

					return typeName;
			}
		}

		var sb = new StringBuilder(type.FullName.Substring(0, type.FullName.IndexOf('`')));
		sb.Append('<');

		var first = true;

		foreach (var t in type.GetGenericArguments())
		{
			if (!first)
			{
				sb.Append(',');
			}

			sb.Append(TypeName(t));
			first = false;
		}

		sb.Append('>');
		return sb.ToString();
	}

	bool IsVoidReturnType(Type returnType)
	{
		return returnType == typeof(void);
	}

	void BuildReturnSignature(StringBuilder sbSignature, MethodInfo method, bool callable)
	{
		var firstParam = true;
		if (callable == false)
		{
			sbSignature.Append(GetAccessModifier(method) + " ");

			if (method.IsStatic)
			{
				sbSignature.Append("");
			}

			sbSignature.Append(TypeName(method.ReturnType));
			sbSignature.Append(' ');
		}

		sbSignature.Append(method.Name);

		if (method.IsGenericMethod)
		{
			sbSignature.Append("<");
			foreach (var g in method.GetGenericArguments())
			{
				if (firstParam)
				{
					firstParam = false;
				}
				else
				{
					sbSignature.Append(", ");
				}

				sbSignature.Append(TypeName(g));
			}

			sbSignature.Append(">");
		}
	}

	string GetAccessModifier(MethodInfo method)
	{
		if (method.IsPublic)
			return "public";
		else if (method.IsPrivate)
			return "private";
		else if (method.IsAssembly)
			return "internal";
		else if (method.IsFamily)
			return "protected";
			
		throw new FormatException("Unable to parse the accessor modifier!");
	}

	MethodInfo LeastRestrictiveVisibility(MethodInfo member1, MethodInfo member2)
	{
		if (member1 != null && member2 == null)
		{
			return member1;
		}
		else if (member2 != null && member1 == null)
		{
			return member2;
		}

		int vis1 = VisibilityValue(member1);
		int vis2 = VisibilityValue(member2);

		if (vis1 < vis2)
		{
			return member1;
		}
		else
		{
			return member2;
		}
	}

	int VisibilityValue(MethodInfo method)
	{
		if (method.IsPublic)
			return 1;
		else if (method.IsFamily)
			return 2;
		else if (method.IsAssembly)
			return 3;
		else if (method.IsPrivate)
			return 4;
			
		throw new FormatException("Unable to parse the visibility!");
	}

	bool IsParamArray(ParameterInfo info)
	{
		return info.GetCustomAttribute(typeof(ParamArrayAttribute), true) != null;
	}

	bool IsExposedOnWcfSide(ProcessorContext context)
	{
		return context.AdvancedOptions.DoNoExposeGeneratedMethodsOnWcfSide == false;
	}

	void WriteAttribute(string attributeName, object value, bool writeIfNull, int leftSpace)
	{
		if (!writeIfNull && value == null)
		{
			return;
		}

		string spacer = null;
		for (int i = 0; i < leftSpace; i++)
		{
			spacer += " ";
		}

		WriteLine(string.Format("{0}{1}=\"{2}\"", spacer, attributeName, (value != null) ? value : string.Empty));
	}
#>