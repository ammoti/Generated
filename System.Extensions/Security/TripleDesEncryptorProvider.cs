// -----------------------------------------------
// This file is part of the LayerCake Generator.
// 
// Copyright (c) 2012, 2015 LayerCake Generator.
// http://www.layercake-generator.net
// -----------------------------------------------

// Base on http://www.codeproject.com/Articles/14150/Encrypt-and-Decrypt-Data-with-C

namespace System
{
	using System.Security.Cryptography;
	using System.Text;

	public class TripleDesEncryptorProvider : IEncryptorProvider
	{
		#region [ Members ]

		/// <summary>
		/// String used to de/cipher data.
		/// The value is unique and it is generated by LayerCake Cooker when deploying the solution.
		/// </summary>
		private readonly string _privateKey = "68C0E654-8FCF-4443-8D26-9FFD17617AA3";

		#endregion

		#region [ Properties ]

		public CipherMode CipherMode = CipherMode.ECB;

		public PaddingMode PaddingMode = PaddingMode.PKCS7;

		#endregion

		#region [ Constructor ]

		/// <summary>
		/// Constructor.
		/// </summary>
		/// 
		/// <param name="privateKey">
		/// Enter a value to override the default private key.
		/// </param>
		public TripleDesEncryptorProvider(string privateKey = null)
		{
			if (!string.IsNullOrEmpty(privateKey))
			{
				_privateKey = privateKey;
			}
		}

		#endregion

		#region [ IEncryptorProvider Implementation ]

		public string Encrypt(string stringToEncrypt)
		{
			byte[] result = Encrypt(UTF8Encoding.UTF8.GetBytes(stringToEncrypt));

			return Convert.ToBase64String(result, 0, result.Length);
		}

		public byte[] Encrypt(byte[] dataToEncrypt)
		{
			using (var provider = this.CreateProvider())
			using (var transformer = provider.CreateEncryptor())
			{
				byte[] result = transformer.TransformFinalBlock(dataToEncrypt, 0, dataToEncrypt.Length);
				provider.Clear();

				return result;
			}
		}

		public string Decrypt(string stringToDecrypt)
		{
			byte[] result = Decrypt(Convert.FromBase64String(stringToDecrypt));

			return UTF8Encoding.UTF8.GetString(result);
		}

		public byte[] Decrypt(byte[] dataToDecrypt)
		{
			using (var provider = this.CreateProvider())
			using (var transformer = provider.CreateDecryptor())
			{
				byte[] result = transformer.TransformFinalBlock(dataToDecrypt, 0, dataToDecrypt.Length);
				provider.Clear();

				return result;
			}
		}

		#endregion

		#region [ Private Methods ]

		private TripleDESCryptoServiceProvider CreateProvider()
		{
			var provider = new TripleDESCryptoServiceProvider();

			provider.Key = this.GetKey();
			provider.Mode = this.CipherMode;
			provider.Padding = this.PaddingMode;

			return provider;
		}

		private byte[] GetKey()
		{
			byte[] bufferKey;

			using (var provider = new MD5CryptoServiceProvider())
			{
				bufferKey = provider.ComputeHash(UTF8Encoding.UTF8.GetBytes(_privateKey));
				provider.Clear();
			}

			return bufferKey;
		}

		#endregion
	}
}
