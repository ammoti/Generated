-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Role_Save
(
	@Role_Id BIGINT = 0,
	@Role_CodeRef VARCHAR(24),
	@Role_Name VARCHAR(24),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @Role_Id;

			IF @Role_Id < 1
			BEGIN
				INSERT INTO [Role]
				(
					 [Role].[Role_CodeRef]
					,[Role].[Role_Name]
				)
				VALUES
				(
					 @Role_CodeRef
					,@Role_Name
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'Role_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [Role_LOGS]'
							+ N' ('
							+ N'  [Role_LOGS].[Role_Id]'
							+ N' ,[Role_LOGS].[Role_CodeRef]'
							+ N' ,[Role_LOGS].[Role_Name]'
							+ N' )'
							+ N' SELECT'
							+ N'  [Role].[Role_Id]'
							+ N' ,[Role].[Role_CodeRef]'
							+ N' ,[Role].[Role_Name]'
							+ N' FROM'
							+ N' [Role] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [Role].[Role_Id] = @Role_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@Role_Id BIGINT', @Role_Id;
					END

					UPDATE
						[Role]
					SET
						 [Role].[Role_CodeRef] = @Role_CodeRef
						,[Role].[Role_Name] = @Role_Name
					WHERE
						[Role_Id] = @Role_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[Role] WITH(NOLOCK)
		WHERE	[Role].[Role_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Role_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END