<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ parameter name="Context" type="LayerCake.Generator.Commons.TextTemplatingProcessContext" #>
<#@ include file="Commons/Includes.ttinclude" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//-----------------------------------------------------------------------------

namespace <#=Context.ProcessorContext.ProjectName#>.Services
{
	using System;
	using System.ServiceModel;
	using System.ServiceModel.Activation;
	using System.Threading.Tasks;
	using System.Transactions;
	using System.Xml;
	
	using <#=Context.ProcessorContext.ProjectName#>.Business;
	using <#=Context.ProcessorContext.ProjectName#>.Contracts;
	using <#=Context.ProcessorContext.ProjectName#>.Core;
	using <#=Context.ProcessorContext.ProjectName#>.Crud;

	/// <summary>
	/// <#=Context.Table.Name#>Service Service.
	/// </summary>
	[ServiceBehavior(<#=GetServiceBehaviorParametersInLine(Context.BusinessClass)#>)]
	[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public partial class <#=Context.Table.Name#>Service : I<#=Context.Table.Name#>Service
	{
		#region [ IService Implementation ]
		
		bool IService.WakeUp(IUserContext userContext)
		{
			return true;
		}

		async Task<bool> IService.WakeUpAsync(IUserContext userContext)
		{
			return await Task.Factory.StartNew(() => true);
		}

		#endregion
<#
	if (Context.Schema.Tables.Any(i => i.Name == Context.Table.Name))
	{
#>

		#region [ I<#=Context.Table.Name#>Service Implementation ]
		
		/// <summary>
		/// Refreshs the entity instance from the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="appSettings">
		/// Entity to refresh (must be in database).
		/// </param>
		public void Refresh(IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				db.Refresh(ref entity);
			}
		}
		
		/// <summary>
		/// Gets an entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
		public <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetById(IUserContext userContext, long id)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.GetById(id);
			}
		}
<#
		if (Context.Table.Name == Context.ProcessorContext.AuthenticationSupport.UserTableName)
		{
			string identifier = Context.ProcessorContext.AuthenticationSupport.UserTableIdentifiedColumnName;
			string identifierLc = identifier.Substring(Context.ProcessorContext.AuthenticationSupport.UserTableName.Length + 1);

			identifierLc = ToMemberName(identifierLc);
#>

		/// <summary>
		/// Gets an entity given its <#=identifierLc#> value.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="<#=identifierLc#>">
		/// Unique <#=identifierLc#> value.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
		public <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetByIdentifier(IUserContext userContext, string <#=identifierLc#>)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.GetByIdentifier(<#=identifierLc#>);
			}
		}
<#
		}

		if (Context.Table.HasIdUserColumn)
		{
#>

		/// <summary>
		/// Gets all the <#=Context.Table.Name#> entities associated to a given <#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>">
		/// Unique ID of the <#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>.
		/// </param>
		/// 
		/// <returns>
		/// A collection of <#=Context.Table.Name#> entities.
		/// </returns>
		public TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> GetById<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>(IUserContext userContext, long id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.GetById<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>(id<#=Context.ProcessorContext.AuthenticationSupport.UserTableName#>);
			}
		}
<#
		}
	
		if (Context.Table.HasCodeRefColumn)
		{
#>
		
		/// <summary>
		/// Gets an entity given its unique CodeRef value.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="codeRef">
		/// Unique CodeRef value.
		/// </param>
		/// 
		/// <returns>
		/// The entity.
		/// </returns>
		public <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> GetByCodeRef(<#=Context.ProcessorContext.ProjectName#>.Core.IUserContext userContext, string codeRef)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.GetByCodeRef(codeRef);
			}
		}
<#
		}
#>

		/// <summary>
		/// Gets entities with search options.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options, filters, orderby, paging, etc.
		/// </param>
		/// 
		/// <returns>
		/// A collection of entities.
		/// </returns>
		public TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> Search(IUserContext userContext, ref SearchOptions options)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.Search(ref options);
			}
		}

		/// <summary>
		/// Gets the number of records that verify the search options.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional search options. If not defined all records are counted.
		/// </param>
		/// 
		/// <returns>
		/// The number of records.
		/// </returns>
		public int Count(IUserContext userContext, SearchOptions options = null)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.Count(options);
			}
		}
		
		/// <summary>
		/// Indicates whether the search returns at least 1 entity.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional search options. If not defined, all records are returned.
		/// </param>
		/// 
		/// <returns>
		/// True if the search returns at least 1 entity; otherwise, false.
		/// </returns>
		public bool HasResult(IUserContext userContext, SearchOptions options = null)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.HasResult(options);
			}
		}
		
		/// <summary>
		/// Saves (or updates) the entity in the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		///
		/// <param name="entity">
		/// Entity to save or update.
		/// </param>
		/// 
		/// <param name="options">
		/// Optional options.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public int Save(IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, SaveOptions options = null)
		{
			using (var et = new ExecutionTracerService(tag: entity.State.ToString()))
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.Save(ref entity, options);
			}
		}
		
		/// <summary>
		/// Deletes the entity from the database.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// Entity to delete.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public int Delete(IUserContext userContext,<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.Delete(entity);
			}
		}
		
		/// <summary>
		/// Deletes the entity given its unique ID.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="id">
		/// Unique ID.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public int Delete(IUserContext userContext, long id)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.Delete(id);
			}
		}
<#
		if (Context.Table.IsOwnership)
		{
#>

		/// <summary>
		/// Sets the Lock status (IsLocked field). A locked entity cannot be neither modified nor deleted on database-side.
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// Entity to lock or unlock.
		/// </param>
		/// 
		/// <param name="isLocked">
		/// Lock status to set.
		/// </param>
		/// 
		/// <returns>
		/// The number of affected rows.
		/// </returns>
		public int SetLock(IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#> entity, bool isLocked)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				return db.SetLock(ref entity, isLocked);
			}
		}
<#
		}

		if (Context.Table.ZeroToOneRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToOneRelations)
			{
#>

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entity associated to the current instance (entity.<#=relation.CSharpPropertyName#> property).
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
		public void Load<#=relation.CSharpPropertyName#>(IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=relation.TableName#> entity)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=relation.TableName#>Crud(userContext))
			{
				db.Load<#=relation.CSharpPropertyName#>(ref entity);
			}
		}
<#
			}
		}

		if (Context.Table.ZeroToManyRelations != null)
		{
			foreach (var relation in Context.Table.ZeroToManyRelations.Where(i => !i.IsLoop))
			{
#>

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entities associated to the current instance (entity.<#=relation.CSharpPropertyName#>Collection property).
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entity">
		/// The target entity.
		/// </param>
		public void Load<#=relation.CSharpPropertyName#>Collection(IUserContext userContext, ref <#=Context.ProcessorContext.ProjectName#>.Models.<#=relation.TableName#> entity)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=relation.TableName#>Crud(userContext))
			{
				db.Load<#=relation.CSharpPropertyName#>Collection(ref entity);
			}
		}

		/// <summary>
		/// Loads the <#=relation.CSharpPropertyName#> entities associated to the instances (entity.<#=relation.CSharpPropertyName#> collection property).
		/// </summary>
		/// 
		/// <param name="userContext">
		/// User context.
		/// </param>
		/// 
		/// <param name="entities">
		/// The target entity collection.
		/// </param>
		public void Load<#=relation.CSharpPropertyName#>Collection(IUserContext userContext, TCollection<<#=Context.ProcessorContext.ProjectName#>.Models.<#=Context.Table.Name#>> entities)
		{
			using (var et = new ExecutionTracerService())
			using (var db = new <#=Context.Table.Name#>Crud(userContext))
			{
				db.Load<#=relation.CSharpPropertyName#>Collection(entities);
			}
		}
<#
			}
		}
#>

		#endregion
<#
	}

	if (Context.BusinessClass != null && Context.BusinessClass.BusinessMethods.Count != 0)
	{
#>

		#region [ I<#=Context.Table.Name#>Service Business Implementation ]
		#pragma warning disable 1591 // Disable 'missing XML comment for publicly visible type or member' warnings

<#
		foreach (BusinessMethodInfo businessMethod in Context.BusinessClass.BusinessMethods)
		{
			if (HasOperationBehaviorParametersInLine(businessMethod))
			{
#>
		[OperationBehavior(<#=GetOperationBehaviorParametersInLine(businessMethod)#>)]
<#
			}
			
			if (HasTransactionFlowParametersInLine(businessMethod))
			{
#>
		[TransactionFlow(<#=GetTransactionFlowParametersInLine(businessMethod)#>)]
<#
			}

			if (businessMethod.OperationSecurityAttribute != null)
			{
#>
		[OperationSecurity(<#=GetOperationSecurityParametersInLine(businessMethod)#>)]
<#
			}

			if (businessMethod.CachingOperationAttribute != null)
			{
#>
		[CachingOperation(<#=GetCachingOperationParametersInLine(businessMethod)#>)]
<#
			}
#>
		<#=GetSignature(businessMethod.Method, false)#>
		{
<#
			if (string.Compare(Context.Table.Name, "ExecutionTrace") == 0)
			{
#>
			var business = new <#=Context.Table.Name#>Business();
<#
				if (businessMethod.Method.ReturnType.Name == "Void")
				{
#>
			business.<#=GetSignature(businessMethod.Method, true)#>;
<#
				}
				else
				{
#>
			return business.<#=GetSignature(businessMethod.Method, true)#>;
<#
				}
			}
			else
			{
#>
			using (var et = new ExecutionTracerService())
			{
				var business = new <#=Context.Table.Name#>Business();
<#
				if (businessMethod.Method.ReturnType.Name == "Void")
				{
#>
				business.<#=GetSignature(businessMethod.Method, true)#>;
<#
				}
				else
				{
#>
				return business.<#=GetSignature(businessMethod.Method, true)#>;
<#
				}
#>
			}
<#
			}
#>
		}

<#
		}
#>
		#pragma warning restore 1591
		#endregion
<#
	}
#>
	}
}