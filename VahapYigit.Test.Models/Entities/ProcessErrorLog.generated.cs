//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by LayerCake Generator v3.7.1.
// http://www.layercake-generator.net
// 
// Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace VahapYigit.Test.Models
{
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.ComponentModel.DataAnnotations;
	using System.Data;
	using System.Diagnostics;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Xml.Serialization;

	using VahapYigit.Test.Core;

	/// <summary>
	/// Entity mapped to ProcessErrorLog DB table.
	/// </summary>
	[Serializable]
	[DataContract(Namespace = Globals.Namespace, IsReference = true)]
	[System.CodeDom.Compiler.GeneratedCode("LayerCake Generator", "3.7.1")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage()]
	public partial class ProcessErrorLog : EntityBase, IProcessErrorLog
	{
		/// <summary>
		/// Gets the name of the entity.
		/// </summary>
		public static readonly string EntityName = "ProcessErrorLog";

		#region [ Constructor ]

		/// <summary>
		/// Default constructor.
		/// </summary>
		public ProcessErrorLog()
			: base()
		{
			this.Initialize();
		}

		#endregion

		#region [ Events ]

		#endregion

		#region [ Column Names ]

		/// <summary>
		/// Contains the entity column names.
		/// </summary>
		public static partial class ColumnNames
		{
			/// <summary>
			/// Name of the Id column ("ProcessErrorLog_Id").
			/// </summary>
			public static readonly string Id = "ProcessErrorLog_Id";

			/// <summary>
			/// Name of the Date column ("ProcessErrorLog_Date").
			/// </summary>
			public static readonly string Date = "ProcessErrorLog_Date";

			/// <summary>
			/// Name of the ProcedureName column ("ProcessErrorLog_ProcedureName").
			/// </summary>
			public static readonly string ProcedureName = "ProcessErrorLog_ProcedureName";

			/// <summary>
			/// Name of the ErrorMessage column ("ProcessErrorLog_ErrorMessage").
			/// </summary>
			public static readonly string ErrorMessage = "ProcessErrorLog_ErrorMessage";

			/// <summary>
			/// Name of the ErrorSeverity column ("ProcessErrorLog_ErrorSeverity").
			/// </summary>
			public static readonly string ErrorSeverity = "ProcessErrorLog_ErrorSeverity";

			/// <summary>
			/// Name of the ErrorState column ("ProcessErrorLog_ErrorState").
			/// </summary>
			public static readonly string ErrorState = "ProcessErrorLog_ErrorState";

			/// <summary>
			/// Name of the Data column ("ProcessErrorLog_Data").
			/// </summary>
			public static readonly string Data = "ProcessErrorLog_Data";

		}

		#endregion

		#region [ Property Names ]

		/// <summary>
		/// Contains the entity property names.
		/// </summary>
		public static partial class PropertyNames
		{
			/// <summary>
			/// Name of the Id property ("Id").
			/// </summary>
			public static readonly string Id = "Id";

			/// <summary>
			/// Name of the Date property ("Date").
			/// </summary>
			public static readonly string Date = "Date";

			/// <summary>
			/// Name of the ProcedureName property ("ProcedureName").
			/// </summary>
			public static readonly string ProcedureName = "ProcedureName";

			/// <summary>
			/// Name of the ErrorMessage property ("ErrorMessage").
			/// </summary>
			public static readonly string ErrorMessage = "ErrorMessage";

			/// <summary>
			/// Name of the ErrorSeverity property ("ErrorSeverity").
			/// </summary>
			public static readonly string ErrorSeverity = "ErrorSeverity";

			/// <summary>
			/// Name of the ErrorState property ("ErrorState").
			/// </summary>
			public static readonly string ErrorState = "ErrorState";

			/// <summary>
			/// Name of the Data property ("Data").
			/// </summary>
			public static readonly string Data = "Data";

		}

		#endregion

		#region [ Properties ]

		#region [ Date ]

		private DateTime _Date;

		/// <summary>
		/// Gets or sets the Date value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual DateTime Date
		{
			get { return _Date; }
			set
			{
				if (value != _Date)
				{
					_Date = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateDate();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Date value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Date value is valid (format, value, etc).
		/// </param>
		partial void OnDateValidation(ref TranslationEnum? error);

		private bool ValidateDate()
		{
			bool isValid = false;

			do
			{
				if (this.Date == DateTime.MinValue)
				{
					base.AddValidationError("Date", TranslationEnum.ModelProcessErrorLogDateIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnDateValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Date", error.Value);
					break;
				}

				base.RemoveValidationErrors("Date");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ ProcedureName ]

		private string _ProcedureName;

		/// <summary>
		/// Gets or sets the ProcedureName value (MANDATORY). 
		/// </summary>
		[DebuggerHidden]
		[Required]
		[DataMember()]
		public virtual string ProcedureName
		{
			get { return _ProcedureName; }
			set
			{
				if (value != _ProcedureName)
				{
					_ProcedureName = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateProcedureName();
					}
				}
			}
		}

		/// <summary>
		/// Method called on ProcedureName value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the ProcedureName value is valid (format, value, etc).
		/// </param>
		partial void OnProcedureNameValidation(ref TranslationEnum? error);

		private bool ValidateProcedureName()
		{
			bool isValid = false;

			do
			{
				if (this.ProcedureName == null)
				{
					base.AddValidationError("ProcedureName", TranslationEnum.ModelProcessErrorLogProcedureNameIsRequired);
					break;
				}

				TranslationEnum? error = null;

				this.OnProcedureNameValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("ProcedureName", error.Value);
					break;
				}

				base.RemoveValidationErrors("ProcedureName");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ ErrorMessage ]

		private string _ErrorMessage;

		/// <summary>
		/// Gets or sets the ErrorMessage value (OPTIONAL). 
		/// </summary>
		[DebuggerHidden]
		[DataMember()]
		public virtual string ErrorMessage
		{
			get { return _ErrorMessage; }
			set
			{
				if (value != _ErrorMessage)
				{
					_ErrorMessage = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateErrorMessage();
					}
				}
			}
		}

		/// <summary>
		/// Method called on ErrorMessage value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the ErrorMessage value is valid (format, value, etc).
		/// </param>
		partial void OnErrorMessageValidation(ref TranslationEnum? error);

		private bool ValidateErrorMessage()
		{
			bool isValid = false;

			do
			{
				TranslationEnum? error = null;

				this.OnErrorMessageValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("ErrorMessage", error.Value);
					break;
				}

				base.RemoveValidationErrors("ErrorMessage");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ ErrorSeverity ]

		private int? _ErrorSeverity;

		/// <summary>
		/// Gets or sets the ErrorSeverity value (OPTIONAL). 
		/// </summary>
		[DebuggerHidden]
		[DataMember()]
		public virtual int? ErrorSeverity
		{
			get { return _ErrorSeverity; }
			set
			{
				if (value != _ErrorSeverity)
				{
					_ErrorSeverity = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateErrorSeverity();
					}
				}
			}
		}

		/// <summary>
		/// Method called on ErrorSeverity value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the ErrorSeverity value is valid (format, value, etc).
		/// </param>
		partial void OnErrorSeverityValidation(ref TranslationEnum? error);

		private bool ValidateErrorSeverity()
		{
			bool isValid = false;

			do
			{
				TranslationEnum? error = null;

				this.OnErrorSeverityValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("ErrorSeverity", error.Value);
					break;
				}

				base.RemoveValidationErrors("ErrorSeverity");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ ErrorState ]

		private int? _ErrorState;

		/// <summary>
		/// Gets or sets the ErrorState value (OPTIONAL). 
		/// </summary>
		[DebuggerHidden]
		[DataMember()]
		public virtual int? ErrorState
		{
			get { return _ErrorState; }
			set
			{
				if (value != _ErrorState)
				{
					_ErrorState = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateErrorState();
					}
				}
			}
		}

		/// <summary>
		/// Method called on ErrorState value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the ErrorState value is valid (format, value, etc).
		/// </param>
		partial void OnErrorStateValidation(ref TranslationEnum? error);

		private bool ValidateErrorState()
		{
			bool isValid = false;

			do
			{
				TranslationEnum? error = null;

				this.OnErrorStateValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("ErrorState", error.Value);
					break;
				}

				base.RemoveValidationErrors("ErrorState");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#region [ Data ]

		private string _Data;

		/// <summary>
		/// Gets or sets the Data value (OPTIONAL). 
		/// </summary>
		[DebuggerHidden]
		[DataMember()]
		public virtual string Data
		{
			get { return _Data; }
			set
			{
				if (value != _Data)
				{
					_Data = value;

					if (!_deserializing)
					{
						base.UpdateState();
					}

					this.NotifyPropertyChanged();

					if (!_deserializing)
					{
						this.ValidateData();
					}
				}
			}
		}

		/// <summary>
		/// Method called on Data value validation.
		/// </summary>
		/// 
		/// <param name="error">
		/// Indicates whether the Data value is valid (format, value, etc).
		/// </param>
		partial void OnDataValidation(ref TranslationEnum? error);

		private bool ValidateData()
		{
			bool isValid = false;

			do
			{
				TranslationEnum? error = null;

				this.OnDataValidation(ref error);
				if (error != null)
				{
					base.AddValidationError("Data", error.Value);
					break;
				}

				base.RemoveValidationErrors("Data");
				isValid = true;
			}
			while (false);

			return isValid;
		}

		#endregion

		#endregion

		#region [ References ]

		#endregion

		#region [ EntityBase Implementation ]

		/// <summary>
		/// Gets the entity properties validity.
		/// </summary>
		/// 
		/// <param name="errors">
		/// Translation errors list (each item represents a translation key of an error).
		/// </param>
		/// 
		/// <returns>
		/// True if all the entity properties are correct; otherwise, false.
		/// </returns>
		public override bool IsValid(out IList<TranslationEnum> errors)
		{
			IList<TranslationEnum> errs = new List<TranslationEnum>();

			if (!this.ValidateDate())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Date");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateProcedureName())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("ProcedureName");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateErrorMessage())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("ErrorMessage");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateErrorSeverity())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("ErrorSeverity");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateErrorState())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("ErrorState");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			if (!this.ValidateData())
			{
				var iterator = ((INotifyDataErrorInfo)this).GetErrors("Data");
				iterator.ForEach(error => errs.Add((TranslationEnum)error));
			}

			errors = errs;

			return errors.Count == 0;
		}
		
		/// <summary>
		/// Fill the entity properties using a source.
		/// </summary>
		/// 
		/// <param name="source">
		/// Source.
		public override void Map(EntityBase source)
		{
			if (source == null)
			{
				ThrowException.ThrowArgumentNullException("source");
			}

			if (!(source is ProcessErrorLog))
			{
				ThrowException.ThrowArgumentException("The 'source' argument is not a 'ProcessErrorLog' instance");
			}

			this.Date = ((ProcessErrorLog)source).Date;
			this.ProcedureName = ((ProcessErrorLog)source).ProcedureName;
			this.ErrorMessage = ((ProcessErrorLog)source).ErrorMessage;
			this.ErrorSeverity = ((ProcessErrorLog)source).ErrorSeverity;
			this.ErrorState = ((ProcessErrorLog)source).ErrorState;
			this.Data = ((ProcessErrorLog)source).Data;

			this.Id = source.Id;
			this.State = source.State;
		}

		/// <summary>
		/// Fills the entity properties using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(IDataReader source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.Date = TypeHelper.To<DateTime>(source[string.Format("{0}Date", columnPrefix)]);
			this.ProcedureName = TypeHelper.To<string>(source[string.Format("{0}ProcedureName", columnPrefix)]);
			this.ErrorMessage = TypeHelper.To<string>(source[string.Format("{0}ErrorMessage", columnPrefix)]);
			this.ErrorSeverity = TypeHelper.To<int?>(source[string.Format("{0}ErrorSeverity", columnPrefix)]);
			this.ErrorState = TypeHelper.To<int?>(source[string.Format("{0}ErrorState", columnPrefix)]);
			this.Data = TypeHelper.To<string>(source[string.Format("{0}Data", columnPrefix)]);

			this.State = EntityState.None;
		}

		/// <summary>
		/// Fill the entity properties using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		/// 
		/// <param name="userContext">
		/// User context (use base.UserContext).
		/// </param>
		/// 
		/// <param name="columnPrefix">
		/// Column prefix (optional).
		/// </param>
		public override void Map(DataRow source, IUserContext userContext, string columnPrefix = null)
		{
			if (columnPrefix == null)
			{
				columnPrefix = string.Concat(EntityName, "_");
			}

			this.Id = TypeHelper.To<long>(source[string.Format("{0}Id", columnPrefix)]);
			this.Date = TypeHelper.To<DateTime>(source[string.Format("{0}Date", columnPrefix)]);
			this.ProcedureName = TypeHelper.To<string>(source[string.Format("{0}ProcedureName", columnPrefix)]);
			this.ErrorMessage = TypeHelper.To<string>(source[string.Format("{0}ErrorMessage", columnPrefix)]);
			this.ErrorSeverity = TypeHelper.To<int?>(source[string.Format("{0}ErrorSeverity", columnPrefix)]);
			this.ErrorState = TypeHelper.To<int?>(source[string.Format("{0}ErrorState", columnPrefix)]);
			this.Data = TypeHelper.To<string>(source[string.Format("{0}Data", columnPrefix)]);

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fills the entity properties and all its dependencies using a IDataReader object.
		/// </summary>
		/// 
		/// <param name="source">
		/// IDataReader object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(IDataReader source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			this.State = EntityState.None;
		}
		
		/// <summary>
		/// Fill the entity properties and all its dependencies using a DataRow object.
		/// </summary>
		/// 
		/// <param name="source">
		/// DataRow object.
		/// </param>
		///
		/// <param name="userContext">
		/// User context (optional).
		/// </param>
		public override void DeepMap(DataRow source, IUserContext userContext = null)
		{
			this.Map(source, userContext);

			this.State = EntityState.None;
		}

		#endregion
	}
}