-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

-- DO NOT ADD THIS FILE TO THE DATABASE PROJECT!

-- NOTE: this script is executed on the target database when generated.

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AppSettings_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [AppSettings_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AppSettings_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [AppSettings_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AppSettings_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [AppSettings_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AppSettings_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [AppSettings_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AppSettings_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [AppSettings_Search]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ExecutionTrace_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ExecutionTrace_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ExecutionTrace_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ExecutionTrace_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ExecutionTrace_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ExecutionTrace_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ExecutionTrace_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ExecutionTrace_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ExecutionTrace_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ExecutionTrace_Search]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessErrorLog_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessErrorLog_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessErrorLog_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessErrorLog_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessErrorLog_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessErrorLog_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessErrorLog_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessErrorLog_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessErrorLog_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessErrorLog_Search]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessLog_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessLog_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessLog_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessLog_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessLog_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessLog_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessLog_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessLog_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ProcessLog_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [ProcessLog_Search]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Role_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Role_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Role_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Role_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Role_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Role_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Role_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Role_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Role_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Role_Search]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Translation_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Translation_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Translation_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Translation_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Translation_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Translation_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Translation_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Translation_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Translation_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [Translation_Search]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [User_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [User_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [User_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [User_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[User_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [User_Search]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[UserRole_Count]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [UserRole_Count]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[UserRole_Delete]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [UserRole_Delete]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[UserRole_Get]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [UserRole_Get]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[UserRole_Save]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [UserRole_Save]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[UserRole_Search]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [UserRole_Search]
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessErrorLog_Save
(
	@ProcessErrorLog_Id BIGINT = 0,
	@ProcessErrorLog_Date DATETIME2(3),
	@ProcessErrorLog_ProcedureName VARCHAR(96),
	@ProcessErrorLog_ErrorMessage VARCHAR(MAX),
	@ProcessErrorLog_ErrorSeverity INT,
	@ProcessErrorLog_ErrorState INT,
	@ProcessErrorLog_Data VARCHAR(MAX),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @ProcessErrorLog_Id;

			IF @ProcessErrorLog_Id < 1
			BEGIN
				INSERT INTO [ProcessErrorLog]
				(
					 [ProcessErrorLog].[ProcessErrorLog_Date]
					,[ProcessErrorLog].[ProcessErrorLog_ProcedureName]
					,[ProcessErrorLog].[ProcessErrorLog_ErrorMessage]
					,[ProcessErrorLog].[ProcessErrorLog_ErrorSeverity]
					,[ProcessErrorLog].[ProcessErrorLog_ErrorState]
					,[ProcessErrorLog].[ProcessErrorLog_Data]
				)
				VALUES
				(
					 @ProcessErrorLog_Date
					,@ProcessErrorLog_ProcedureName
					,@ProcessErrorLog_ErrorMessage
					,@ProcessErrorLog_ErrorSeverity
					,@ProcessErrorLog_ErrorState
					,@ProcessErrorLog_Data
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'ProcessErrorLog_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [ProcessErrorLog_LOGS]'
							+ N' ('
							+ N'  [ProcessErrorLog_LOGS].[ProcessErrorLog_Id]'
							+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_Date]'
							+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ProcedureName]'
							+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ErrorMessage]'
							+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ErrorSeverity]'
							+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ErrorState]'
							+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_Data]'
							+ N' )'
							+ N' SELECT'
							+ N'  [ProcessErrorLog].[ProcessErrorLog_Id]'
							+ N' ,[ProcessErrorLog].[ProcessErrorLog_Date]'
							+ N' ,[ProcessErrorLog].[ProcessErrorLog_ProcedureName]'
							+ N' ,[ProcessErrorLog].[ProcessErrorLog_ErrorMessage]'
							+ N' ,[ProcessErrorLog].[ProcessErrorLog_ErrorSeverity]'
							+ N' ,[ProcessErrorLog].[ProcessErrorLog_ErrorState]'
							+ N' ,[ProcessErrorLog].[ProcessErrorLog_Data]'
							+ N' FROM'
							+ N' [ProcessErrorLog] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [ProcessErrorLog].[ProcessErrorLog_Id] = @ProcessErrorLog_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@ProcessErrorLog_Id BIGINT', @ProcessErrorLog_Id;
					END

					UPDATE
						[ProcessErrorLog]
					SET
						 [ProcessErrorLog].[ProcessErrorLog_Date] = @ProcessErrorLog_Date
						,[ProcessErrorLog].[ProcessErrorLog_ProcedureName] = @ProcessErrorLog_ProcedureName
						,[ProcessErrorLog].[ProcessErrorLog_ErrorMessage] = @ProcessErrorLog_ErrorMessage
						,[ProcessErrorLog].[ProcessErrorLog_ErrorSeverity] = @ProcessErrorLog_ErrorSeverity
						,[ProcessErrorLog].[ProcessErrorLog_ErrorState] = @ProcessErrorLog_ErrorState
						,[ProcessErrorLog].[ProcessErrorLog_Data] = @ProcessErrorLog_Data
					WHERE
						[ProcessErrorLog_Id] = @ProcessErrorLog_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[ProcessErrorLog] WITH(NOLOCK)
		WHERE	[ProcessErrorLog].[ProcessErrorLog_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE AppSettings_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [AppSettings] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [AppSettings] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'AppSettings_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE AppSettings_Delete
(
	@AppSettings_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'AppSettings_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [AppSettings_LOGS]'
						+ N' ('
						+ N'  [AppSettings_LOGS].[AppSettings_Id]'
						+ N' ,[AppSettings_LOGS].[AppSettings_Key]'
						+ N' ,[AppSettings_LOGS].[AppSettings_Value]'
						+ N' ,[AppSettings_LOGS].[AppSettings_Description]'
						+ N' )'
						+ N' SELECT'
						+ N'  [AppSettings].[AppSettings_Id]'
						+ N' ,[AppSettings].[AppSettings_Key]'
						+ N' ,[AppSettings].[AppSettings_Value]'
						+ N' ,[AppSettings].[AppSettings_Description]'
						+ N' FROM'
						+ N' [AppSettings] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [AppSettings].[AppSettings_Id] = @AppSettings_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@AppSettings_Id BIGINT', @AppSettings_Id;

				END

				DELETE FROM [AppSettings] WHERE [AppSettings].[AppSettings_Id] = @AppSettings_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'AppSettings_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE AppSettings_Get
(
	@AppSettings_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	*
	FROM	[AppSettings] WITH(NOLOCK)
	WHERE	[AppSettings].[AppSettings_Id] = @AppSettings_Id;

END

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE AppSettings_Save
(
	@AppSettings_Id BIGINT = 0,
	@AppSettings_Key VARCHAR(128),
	@AppSettings_Value VARCHAR(1024),
	@AppSettings_Description VARCHAR(256),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @AppSettings_Id;

			IF @AppSettings_Id < 1
			BEGIN
				INSERT INTO [AppSettings]
				(
					 [AppSettings].[AppSettings_Key]
					,[AppSettings].[AppSettings_Value]
					,[AppSettings].[AppSettings_Description]
				)
				VALUES
				(
					 @AppSettings_Key
					,@AppSettings_Value
					,@AppSettings_Description
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'AppSettings_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [AppSettings_LOGS]'
							+ N' ('
							+ N'  [AppSettings_LOGS].[AppSettings_Id]'
							+ N' ,[AppSettings_LOGS].[AppSettings_Key]'
							+ N' ,[AppSettings_LOGS].[AppSettings_Value]'
							+ N' ,[AppSettings_LOGS].[AppSettings_Description]'
							+ N' )'
							+ N' SELECT'
							+ N'  [AppSettings].[AppSettings_Id]'
							+ N' ,[AppSettings].[AppSettings_Key]'
							+ N' ,[AppSettings].[AppSettings_Value]'
							+ N' ,[AppSettings].[AppSettings_Description]'
							+ N' FROM'
							+ N' [AppSettings] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [AppSettings].[AppSettings_Id] = @AppSettings_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@AppSettings_Id BIGINT', @AppSettings_Id;
					END

					UPDATE
						[AppSettings]
					SET
						 [AppSettings].[AppSettings_Key] = @AppSettings_Key
						,[AppSettings].[AppSettings_Value] = @AppSettings_Value
						,[AppSettings].[AppSettings_Description] = @AppSettings_Description
					WHERE
						[AppSettings_Id] = @AppSettings_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[AppSettings] WITH(NOLOCK)
		WHERE	[AppSettings].[AppSettings_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'AppSettings_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE AppSettings_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [AppSettings] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [AppSettings_Id]) AS RowNumber FROM [AppSettings] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [AppSettings] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [AppSettings_Id]) AS RowNumber FROM [AppSettings] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [AppSettings] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [AppSettings] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [AppSettings] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [AppSettings] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [AppSettings] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'AppSettings_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ExecutionTrace_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [ExecutionTrace] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [ExecutionTrace] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ExecutionTrace_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ExecutionTrace_Delete
(
	@ExecutionTrace_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'ExecutionTrace_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [ExecutionTrace_LOGS]'
						+ N' ('
						+ N'  [ExecutionTrace_LOGS].[ExecutionTrace_Id]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_Module]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_ClassName]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_MethodName]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_Tag]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_MinDuration]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_MaxDuration]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_TotalDuration]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_Counter]'
						+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_LastCall]'
						+ N' )'
						+ N' SELECT'
						+ N'  [ExecutionTrace].[ExecutionTrace_Id]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_Module]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_ClassName]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_MethodName]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_Tag]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_MinDuration]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_MaxDuration]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_TotalDuration]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_Counter]'
						+ N' ,[ExecutionTrace].[ExecutionTrace_LastCall]'
						+ N' FROM'
						+ N' [ExecutionTrace] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [ExecutionTrace].[ExecutionTrace_Id] = @ExecutionTrace_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@ExecutionTrace_Id BIGINT', @ExecutionTrace_Id;

				END

				DELETE FROM [ExecutionTrace] WHERE [ExecutionTrace].[ExecutionTrace_Id] = @ExecutionTrace_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ExecutionTrace_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ExecutionTrace_Get
(
	@ExecutionTrace_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	*
	FROM	[ExecutionTrace] WITH(NOLOCK)
	WHERE	[ExecutionTrace].[ExecutionTrace_Id] = @ExecutionTrace_Id;

END

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ExecutionTrace_Save
(
	@ExecutionTrace_Id BIGINT = 0,
	@ExecutionTrace_Module VARCHAR(128),
	@ExecutionTrace_ClassName VARCHAR(256),
	@ExecutionTrace_MethodName VARCHAR(96),
	@ExecutionTrace_Tag VARCHAR(96),
	@ExecutionTrace_MinDuration INT,
	@ExecutionTrace_MaxDuration INT,
	@ExecutionTrace_TotalDuration BIGINT,
	@ExecutionTrace_Counter BIGINT,
	@ExecutionTrace_LastCall DATETIME2(3),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @ExecutionTrace_Id;

			IF @ExecutionTrace_Id < 1
			BEGIN
				INSERT INTO [ExecutionTrace]
				(
					 [ExecutionTrace].[ExecutionTrace_Module]
					,[ExecutionTrace].[ExecutionTrace_ClassName]
					,[ExecutionTrace].[ExecutionTrace_MethodName]
					,[ExecutionTrace].[ExecutionTrace_Tag]
					,[ExecutionTrace].[ExecutionTrace_MinDuration]
					,[ExecutionTrace].[ExecutionTrace_MaxDuration]
					,[ExecutionTrace].[ExecutionTrace_TotalDuration]
					,[ExecutionTrace].[ExecutionTrace_Counter]
					,[ExecutionTrace].[ExecutionTrace_LastCall]
				)
				VALUES
				(
					 @ExecutionTrace_Module
					,@ExecutionTrace_ClassName
					,@ExecutionTrace_MethodName
					,@ExecutionTrace_Tag
					,@ExecutionTrace_MinDuration
					,@ExecutionTrace_MaxDuration
					,@ExecutionTrace_TotalDuration
					,@ExecutionTrace_Counter
					,@ExecutionTrace_LastCall
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'ExecutionTrace_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [ExecutionTrace_LOGS]'
							+ N' ('
							+ N'  [ExecutionTrace_LOGS].[ExecutionTrace_Id]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_Module]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_ClassName]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_MethodName]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_Tag]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_MinDuration]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_MaxDuration]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_TotalDuration]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_Counter]'
							+ N' ,[ExecutionTrace_LOGS].[ExecutionTrace_LastCall]'
							+ N' )'
							+ N' SELECT'
							+ N'  [ExecutionTrace].[ExecutionTrace_Id]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_Module]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_ClassName]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_MethodName]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_Tag]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_MinDuration]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_MaxDuration]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_TotalDuration]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_Counter]'
							+ N' ,[ExecutionTrace].[ExecutionTrace_LastCall]'
							+ N' FROM'
							+ N' [ExecutionTrace] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [ExecutionTrace].[ExecutionTrace_Id] = @ExecutionTrace_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@ExecutionTrace_Id BIGINT', @ExecutionTrace_Id;
					END

					UPDATE
						[ExecutionTrace]
					SET
						 [ExecutionTrace].[ExecutionTrace_Module] = @ExecutionTrace_Module
						,[ExecutionTrace].[ExecutionTrace_ClassName] = @ExecutionTrace_ClassName
						,[ExecutionTrace].[ExecutionTrace_MethodName] = @ExecutionTrace_MethodName
						,[ExecutionTrace].[ExecutionTrace_Tag] = @ExecutionTrace_Tag
						,[ExecutionTrace].[ExecutionTrace_MinDuration] = @ExecutionTrace_MinDuration
						,[ExecutionTrace].[ExecutionTrace_MaxDuration] = @ExecutionTrace_MaxDuration
						,[ExecutionTrace].[ExecutionTrace_TotalDuration] = @ExecutionTrace_TotalDuration
						,[ExecutionTrace].[ExecutionTrace_Counter] = @ExecutionTrace_Counter
						,[ExecutionTrace].[ExecutionTrace_LastCall] = @ExecutionTrace_LastCall
					WHERE
						[ExecutionTrace_Id] = @ExecutionTrace_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[ExecutionTrace] WITH(NOLOCK)
		WHERE	[ExecutionTrace].[ExecutionTrace_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ExecutionTrace_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ExecutionTrace_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [ExecutionTrace] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [ExecutionTrace_Id]) AS RowNumber FROM [ExecutionTrace] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [ExecutionTrace] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [ExecutionTrace_Id]) AS RowNumber FROM [ExecutionTrace] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ExecutionTrace] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ExecutionTrace] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ExecutionTrace] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ExecutionTrace] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [ExecutionTrace] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ExecutionTrace_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessErrorLog_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [ProcessErrorLog] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [ProcessErrorLog] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessErrorLog_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessErrorLog_Delete
(
	@ProcessErrorLog_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'ProcessErrorLog_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [ProcessErrorLog_LOGS]'
						+ N' ('
						+ N'  [ProcessErrorLog_LOGS].[ProcessErrorLog_Id]'
						+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_Date]'
						+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ProcedureName]'
						+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ErrorMessage]'
						+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ErrorSeverity]'
						+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_ErrorState]'
						+ N' ,[ProcessErrorLog_LOGS].[ProcessErrorLog_Data]'
						+ N' )'
						+ N' SELECT'
						+ N'  [ProcessErrorLog].[ProcessErrorLog_Id]'
						+ N' ,[ProcessErrorLog].[ProcessErrorLog_Date]'
						+ N' ,[ProcessErrorLog].[ProcessErrorLog_ProcedureName]'
						+ N' ,[ProcessErrorLog].[ProcessErrorLog_ErrorMessage]'
						+ N' ,[ProcessErrorLog].[ProcessErrorLog_ErrorSeverity]'
						+ N' ,[ProcessErrorLog].[ProcessErrorLog_ErrorState]'
						+ N' ,[ProcessErrorLog].[ProcessErrorLog_Data]'
						+ N' FROM'
						+ N' [ProcessErrorLog] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [ProcessErrorLog].[ProcessErrorLog_Id] = @ProcessErrorLog_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@ProcessErrorLog_Id BIGINT', @ProcessErrorLog_Id;

				END

				DELETE FROM [ProcessErrorLog] WHERE [ProcessErrorLog].[ProcessErrorLog_Id] = @ProcessErrorLog_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessErrorLog_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessErrorLog_Get
(
	@ProcessErrorLog_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	*
	FROM	[ProcessErrorLog] WITH(NOLOCK)
	WHERE	[ProcessErrorLog].[ProcessErrorLog_Id] = @ProcessErrorLog_Id;

END

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessErrorLog_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [ProcessErrorLog] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [ProcessErrorLog_Id]) AS RowNumber FROM [ProcessErrorLog] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [ProcessErrorLog] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [ProcessErrorLog_Id]) AS RowNumber FROM [ProcessErrorLog] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessErrorLog] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessErrorLog] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessErrorLog] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessErrorLog] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [ProcessErrorLog] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessErrorLog_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessLog_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [ProcessLog] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [ProcessLog] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessLog_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessLog_Delete
(
	@ProcessLog_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'ProcessLog_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [ProcessLog_LOGS]'
						+ N' ('
						+ N'  [ProcessLog_LOGS].[ProcessLog_Id]'
						+ N' ,[ProcessLog_LOGS].[ProcessLog_Date]'
						+ N' ,[ProcessLog_LOGS].[ProcessLog_ProcedureName]'
						+ N' ,[ProcessLog_LOGS].[ProcessLog_Data]'
						+ N' )'
						+ N' SELECT'
						+ N'  [ProcessLog].[ProcessLog_Id]'
						+ N' ,[ProcessLog].[ProcessLog_Date]'
						+ N' ,[ProcessLog].[ProcessLog_ProcedureName]'
						+ N' ,[ProcessLog].[ProcessLog_Data]'
						+ N' FROM'
						+ N' [ProcessLog] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [ProcessLog].[ProcessLog_Id] = @ProcessLog_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@ProcessLog_Id BIGINT', @ProcessLog_Id;

				END

				DELETE FROM [ProcessLog] WHERE [ProcessLog].[ProcessLog_Id] = @ProcessLog_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessLog_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessLog_Get
(
	@ProcessLog_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	*
	FROM	[ProcessLog] WITH(NOLOCK)
	WHERE	[ProcessLog].[ProcessLog_Id] = @ProcessLog_Id;

END

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessLog_Save
(
	@ProcessLog_Id BIGINT = 0,
	@ProcessLog_Date DATETIME2(3),
	@ProcessLog_ProcedureName VARCHAR(96),
	@ProcessLog_Data VARCHAR(MAX),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @ProcessLog_Id;

			IF @ProcessLog_Id < 1
			BEGIN
				INSERT INTO [ProcessLog]
				(
					 [ProcessLog].[ProcessLog_Date]
					,[ProcessLog].[ProcessLog_ProcedureName]
					,[ProcessLog].[ProcessLog_Data]
				)
				VALUES
				(
					 @ProcessLog_Date
					,@ProcessLog_ProcedureName
					,@ProcessLog_Data
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'ProcessLog_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [ProcessLog_LOGS]'
							+ N' ('
							+ N'  [ProcessLog_LOGS].[ProcessLog_Id]'
							+ N' ,[ProcessLog_LOGS].[ProcessLog_Date]'
							+ N' ,[ProcessLog_LOGS].[ProcessLog_ProcedureName]'
							+ N' ,[ProcessLog_LOGS].[ProcessLog_Data]'
							+ N' )'
							+ N' SELECT'
							+ N'  [ProcessLog].[ProcessLog_Id]'
							+ N' ,[ProcessLog].[ProcessLog_Date]'
							+ N' ,[ProcessLog].[ProcessLog_ProcedureName]'
							+ N' ,[ProcessLog].[ProcessLog_Data]'
							+ N' FROM'
							+ N' [ProcessLog] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [ProcessLog].[ProcessLog_Id] = @ProcessLog_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@ProcessLog_Id BIGINT', @ProcessLog_Id;
					END

					UPDATE
						[ProcessLog]
					SET
						 [ProcessLog].[ProcessLog_Date] = @ProcessLog_Date
						,[ProcessLog].[ProcessLog_ProcedureName] = @ProcessLog_ProcedureName
						,[ProcessLog].[ProcessLog_Data] = @ProcessLog_Data
					WHERE
						[ProcessLog_Id] = @ProcessLog_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[ProcessLog] WITH(NOLOCK)
		WHERE	[ProcessLog].[ProcessLog_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessLog_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE ProcessLog_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [ProcessLog] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [ProcessLog_Id]) AS RowNumber FROM [ProcessLog] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [ProcessLog] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [ProcessLog_Id]) AS RowNumber FROM [ProcessLog] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessLog] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessLog] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessLog] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [ProcessLog] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [ProcessLog] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'ProcessLog_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Role_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [Role] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [Role] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Role_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Role_Delete
(
	@Role_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'Role_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [Role_LOGS]'
						+ N' ('
						+ N'  [Role_LOGS].[Role_Id]'
						+ N' ,[Role_LOGS].[Role_CodeRef]'
						+ N' ,[Role_LOGS].[Role_Name]'
						+ N' )'
						+ N' SELECT'
						+ N'  [Role].[Role_Id]'
						+ N' ,[Role].[Role_CodeRef]'
						+ N' ,[Role].[Role_Name]'
						+ N' FROM'
						+ N' [Role] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [Role].[Role_Id] = @Role_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@Role_Id BIGINT', @Role_Id;

				END

				DELETE FROM [Role] WHERE [Role].[Role_Id] = @Role_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Role_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Role_Get
(
	@Role_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	*
	FROM	[Role] WITH(NOLOCK)
	WHERE	[Role].[Role_Id] = @Role_Id;

END

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Role_Save
(
	@Role_Id BIGINT = 0,
	@Role_CodeRef VARCHAR(24),
	@Role_Name VARCHAR(24),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @Role_Id;

			IF @Role_Id < 1
			BEGIN
				INSERT INTO [Role]
				(
					 [Role].[Role_CodeRef]
					,[Role].[Role_Name]
				)
				VALUES
				(
					 @Role_CodeRef
					,@Role_Name
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'Role_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [Role_LOGS]'
							+ N' ('
							+ N'  [Role_LOGS].[Role_Id]'
							+ N' ,[Role_LOGS].[Role_CodeRef]'
							+ N' ,[Role_LOGS].[Role_Name]'
							+ N' )'
							+ N' SELECT'
							+ N'  [Role].[Role_Id]'
							+ N' ,[Role].[Role_CodeRef]'
							+ N' ,[Role].[Role_Name]'
							+ N' FROM'
							+ N' [Role] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [Role].[Role_Id] = @Role_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@Role_Id BIGINT', @Role_Id;
					END

					UPDATE
						[Role]
					SET
						 [Role].[Role_CodeRef] = @Role_CodeRef
						,[Role].[Role_Name] = @Role_Name
					WHERE
						[Role_Id] = @Role_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[Role] WITH(NOLOCK)
		WHERE	[Role].[Role_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Role_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Role_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [Role] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [Role_Id]) AS RowNumber FROM [Role] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [Role] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [Role_Id]) AS RowNumber FROM [Role] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Role] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Role] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Role] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Role] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [Role] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Role_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Translation_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [Translation] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [Translation] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Translation_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Translation_Delete
(
	@Translation_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'Translation_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [Translation_LOGS]'
						+ N' ('
						+ N'  [Translation_LOGS].[Translation_Id]'
						+ N' ,[Translation_LOGS].[Translation_Key]'
						+ N' ,[Translation_LOGS].[Translation_Value_EN]'
						+ N' )'
						+ N' SELECT'
						+ N'  [Translation].[Translation_Id]'
						+ N' ,[Translation].[Translation_Key]'
						+ N' ,[Translation].[Translation_Value_EN]'
						+ N' FROM'
						+ N' [Translation] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [Translation].[Translation_Id] = @Translation_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@Translation_Id BIGINT', @Translation_Id;

				END

				DELETE FROM [Translation] WHERE [Translation].[Translation_Id] = @Translation_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Translation_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Translation_Get
(
	@Translation_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	*
	FROM	[Translation] WITH(NOLOCK)
	WHERE	[Translation].[Translation_Id] = @Translation_Id;

END

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Translation_Save
(
	@Translation_Id BIGINT = 0,
	@Translation_Key VARCHAR(256),
	@Translation_Value_EN VARCHAR(1024),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @Translation_Id;

			IF @Translation_Id < 1
			BEGIN
				INSERT INTO [Translation]
				(
					 [Translation].[Translation_Key]
					,[Translation].[Translation_Value_EN]
				)
				VALUES
				(
					 @Translation_Key
					,@Translation_Value_EN
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'Translation_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [Translation_LOGS]'
							+ N' ('
							+ N'  [Translation_LOGS].[Translation_Id]'
							+ N' ,[Translation_LOGS].[Translation_Key]'
							+ N' ,[Translation_LOGS].[Translation_Value_EN]'
							+ N' )'
							+ N' SELECT'
							+ N'  [Translation].[Translation_Id]'
							+ N' ,[Translation].[Translation_Key]'
							+ N' ,[Translation].[Translation_Value_EN]'
							+ N' FROM'
							+ N' [Translation] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [Translation].[Translation_Id] = @Translation_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@Translation_Id BIGINT', @Translation_Id;
					END

					UPDATE
						[Translation]
					SET
						 [Translation].[Translation_Key] = @Translation_Key
						,[Translation].[Translation_Value_EN] = @Translation_Value_EN
					WHERE
						[Translation_Id] = @Translation_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[Translation] WITH(NOLOCK)
		WHERE	[Translation].[Translation_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Translation_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE Translation_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [Translation] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [Translation_Id]) AS RowNumber FROM [Translation] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [Translation] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [Translation_Id]) AS RowNumber FROM [Translation] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Translation] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Translation] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Translation] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [Translation] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [Translation] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'Translation_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE User_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [User] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [User] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'User_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE User_Delete
(
	@User_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'User_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [User_LOGS]'
						+ N' ('
						+ N'  [User_LOGS].[User_Id]'
						+ N' ,[User_LOGS].[User_Username]'
						+ N' ,[User_LOGS].[User_Password]'
						+ N' ,[User_LOGS].[User_Email]'
						+ N' ,[User_LOGS].[User_PasswordQuestion]'
						+ N' ,[User_LOGS].[User_PasswordResponse]'
						+ N' ,[User_LOGS].[User_RegistrationDate]'
						+ N' ,[User_LOGS].[User_LastConnectionDate]'
						+ N' ,[User_LOGS].[User_Culture]'
						+ N' )'
						+ N' SELECT'
						+ N'  [User].[User_Id]'
						+ N' ,[User].[User_Username]'
						+ N' ,[User].[User_Password]'
						+ N' ,[User].[User_Email]'
						+ N' ,[User].[User_PasswordQuestion]'
						+ N' ,[User].[User_PasswordResponse]'
						+ N' ,[User].[User_RegistrationDate]'
						+ N' ,[User].[User_LastConnectionDate]'
						+ N' ,[User].[User_Culture]'
						+ N' FROM'
						+ N' [User] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [User].[User_Id] = @User_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@User_Id BIGINT', @User_Id;

				END

				DELETE FROM [User] WHERE [User].[User_Id] = @User_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'User_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE User_Get
(
	@User_Id BIGINT,
	@User_Email VARCHAR(256),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	IF @User_Email IS NOT NULL
	BEGIN

		SELECT	*
		FROM	[User] WITH(NOLOCK)
		WHERE	UPPER([User].[User_Email]) = UPPER(@User_Email);

	END
	ELSE
	BEGIN

		SELECT	*
		FROM	[User] WITH(NOLOCK)
		WHERE	[User].[User_Id] = @User_Id;

	END
END
GO

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE User_Save
(
	@User_Id BIGINT = 0,
	@User_Username VARCHAR(16),
	@User_Password VARCHAR(40),
	@User_Email VARCHAR(256),
	@User_PasswordQuestion VARCHAR(48),
	@User_PasswordResponse VARCHAR(32),
	@User_RegistrationDate DATETIME2(0),
	@User_LastConnectionDate DATETIME2(0),
	@User_Culture VARCHAR(2),

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @User_Id;

			IF @User_Id < 1
			BEGIN
				INSERT INTO [User]
				(
					 [User].[User_Username]
					,[User].[User_Password]
					,[User].[User_Email]
					,[User].[User_PasswordQuestion]
					,[User].[User_PasswordResponse]
					,[User].[User_RegistrationDate]
					,[User].[User_LastConnectionDate]
					,[User].[User_Culture]
				)
				VALUES
				(
					 @User_Username
					,@User_Password
					,@User_Email
					,@User_PasswordQuestion
					,@User_PasswordResponse
					,@User_RegistrationDate
					,@User_LastConnectionDate
					,@User_Culture
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'User_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [User_LOGS]'
							+ N' ('
							+ N'  [User_LOGS].[User_Id]'
							+ N' ,[User_LOGS].[User_Username]'
							+ N' ,[User_LOGS].[User_Password]'
							+ N' ,[User_LOGS].[User_Email]'
							+ N' ,[User_LOGS].[User_PasswordQuestion]'
							+ N' ,[User_LOGS].[User_PasswordResponse]'
							+ N' ,[User_LOGS].[User_RegistrationDate]'
							+ N' ,[User_LOGS].[User_LastConnectionDate]'
							+ N' ,[User_LOGS].[User_Culture]'
							+ N' )'
							+ N' SELECT'
							+ N'  [User].[User_Id]'
							+ N' ,[User].[User_Username]'
							+ N' ,[User].[User_Password]'
							+ N' ,[User].[User_Email]'
							+ N' ,[User].[User_PasswordQuestion]'
							+ N' ,[User].[User_PasswordResponse]'
							+ N' ,[User].[User_RegistrationDate]'
							+ N' ,[User].[User_LastConnectionDate]'
							+ N' ,[User].[User_Culture]'
							+ N' FROM'
							+ N' [User] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [User].[User_Id] = @User_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@User_Id BIGINT', @User_Id;
					END

					UPDATE
						[User]
					SET
						 [User].[User_Username] = @User_Username
						,[User].[User_Password] = @User_Password
						,[User].[User_Email] = @User_Email
						,[User].[User_PasswordQuestion] = @User_PasswordQuestion
						,[User].[User_PasswordResponse] = @User_PasswordResponse
						,[User].[User_RegistrationDate] = @User_RegistrationDate
						,[User].[User_LastConnectionDate] = @User_LastConnectionDate
						,[User].[User_Culture] = @User_Culture
					WHERE
						[User_Id] = @User_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[User] WITH(NOLOCK)
		WHERE	[User].[User_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'User_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE User_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [User] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [User_Id]) AS RowNumber FROM [User] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [User] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [User_Id]) AS RowNumber FROM [User] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [User] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [User] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [User] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [User] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [User] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'User_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE UserRole_Count
(
	@Filter VARCHAR(MAX) = NULL,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @V_STATEMENT VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @Filter IS NOT NULL
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [UserRole] WITH(NOLOCK) WHERE ' + @Filter;

		END
		ELSE
		BEGIN

			SET @V_STATEMENT = N'SELECT COUNT(0) FROM [UserRole] WITH(NOLOCK)';

		END

		EXEC (@V_STATEMENT);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'UserRole_Count',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE UserRole_Delete
(
	@UserRole_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN
	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ROWCOUNT INT = 0;
			DECLARE @V_IS_LOCKED BIT = N'False';

			IF (@V_IS_LOCKED = N'False')
			BEGIN

				IF (EXISTS(	SELECT	TOP 1 1
							FROM	[sys].[tables] WITH(NOLOCK)
							WHERE	[name] = N'UserRole_LOGS'))
				BEGIN

					DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
						  N' INSERT INTO [UserRole_LOGS]'
						+ N' ('
						+ N'  [UserRole_LOGS].[UserRole_Id]'
						+ N' ,[UserRole_LOGS].[UserRole_IdUser]'
						+ N' ,[UserRole_LOGS].[UserRole_IdRole]'
						+ N' )'
						+ N' SELECT'
						+ N'  [UserRole].[UserRole_Id]'
						+ N' ,[UserRole].[UserRole_IdUser]'
						+ N' ,[UserRole].[UserRole_IdRole]'
						+ N' FROM'
						+ N' [UserRole] WITH(NOLOCK)'
						+ N' WHERE'
						+ N' [UserRole].[UserRole_Id] = @UserRole_Id;';

					EXECUTE sp_executesql @V_LOG_QUERY, N'@UserRole_Id BIGINT', @UserRole_Id;

				END

				DELETE FROM [UserRole] WHERE [UserRole].[UserRole_Id] = @UserRole_Id;

				SET @V_ROWCOUNT = @@ROWCOUNT;
			END

		COMMIT TRANSACTION;

		SELECT @V_ROWCOUNT;

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'UserRole_Delete',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE UserRole_Get
(
	@UserRole_Id BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	*
	FROM	[UserRole] WITH(NOLOCK)
	WHERE	[UserRole].[UserRole_Id] = @UserRole_Id;

END

GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE UserRole_Save
(
	@UserRole_Id BIGINT = 0,
	@UserRole_IdUser BIGINT,
	@UserRole_IdRole BIGINT,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT = N'True'
)
AS
BEGIN

	SET NOCOUNT ON;
	SET XACT_ABORT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			DECLARE @V_ID BIGINT = @UserRole_Id;

			IF @UserRole_Id < 1
			BEGIN
				INSERT INTO [UserRole]
				(
					 [UserRole].[UserRole_IdUser]
					,[UserRole].[UserRole_IdRole]
				)
				VALUES
				(
					 @UserRole_IdUser
					,@UserRole_IdRole
				);

				SET @V_ID = SCOPE_IDENTITY();

			END
			ELSE
			BEGIN

				DECLARE @V_IS_LOCKED BIT = N'False';

				IF (@V_IS_LOCKED = N'False')
				BEGIN

					IF (EXISTS(	SELECT	TOP 1 1
								FROM	[sys].[tables] WITH(NOLOCK)
								WHERE	[name] = N'UserRole_LOGS'))
					BEGIN

						DECLARE @V_LOG_QUERY NVARCHAR(MAX) = 
							  N' INSERT INTO [UserRole_LOGS]'
							+ N' ('
							+ N'  [UserRole_LOGS].[UserRole_Id]'
							+ N' ,[UserRole_LOGS].[UserRole_IdUser]'
							+ N' ,[UserRole_LOGS].[UserRole_IdRole]'
							+ N' )'
							+ N' SELECT'
							+ N'  [UserRole].[UserRole_Id]'
							+ N' ,[UserRole].[UserRole_IdUser]'
							+ N' ,[UserRole].[UserRole_IdRole]'
							+ N' FROM'
							+ N' [UserRole] WITH(NOLOCK)'
							+ N' WHERE'
							+ N' [UserRole].[UserRole_Id] = @UserRole_Id;';

						EXECUTE sp_executesql @V_LOG_QUERY, N'@UserRole_Id BIGINT', @UserRole_Id;
					END

					UPDATE
						[UserRole]
					SET
						 [UserRole].[UserRole_IdUser] = @UserRole_IdUser
						,[UserRole].[UserRole_IdRole] = @UserRole_IdRole
					WHERE
						[UserRole_Id] = @UserRole_Id;

				END

			END

		COMMIT TRANSACTION;

		SELECT	*
		FROM	[UserRole] WITH(NOLOCK)
		WHERE	[UserRole].[UserRole_Id] = @V_ID;

		RETURN (@@ROWCOUNT);

	END TRY
	BEGIN CATCH

		IF XACT_STATE() != 0
		BEGIN
			ROLLBACK TRANSACTION;
		END
		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'UserRole_Save',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = NULL,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
-- ------------------------------------------------------------------------------ 
-- <auto-generated> 
-- This code was generated by LayerCake Generator v3.7.1.
-- http://www.layercake-generator.net
-- 
-- Changes to this file may cause incorrect behavior AND WILL BE LOST IF 
-- the code is regenerated. 
-- </auto-generated> 
-- ------------------------------------------------------------------------------

CREATE PROCEDURE UserRole_Search
(
	@Filter VARCHAR(MAX) = NULL,
	@OrderBy VARCHAR(1024) = NULL,
	@MaxRecords INT,

	@CtxWithPaging BIT = N'False',
	@CtxPagingCurrentPage INT = 1,
	@CtxPagingRecordsPerPage INT = 50,

	@CtxUser BIGINT = NULL,
	@CtxCulture VARCHAR(2) = N'EN',
	@CtxWithContextSecurity BIT =  N'True'
)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @V_STATEMENT_DATA VARCHAR(MAX) = N'';
	DECLARE @V_STATEMENT_TOTAL_RECORDS VARCHAR(MAX) = N'';

	BEGIN TRY

		IF @CtxWithPaging = N'True'
		BEGIN

			IF @CtxPagingCurrentPage < 1 BEGIN SET @CtxPagingCurrentPage = 1 END;
			IF @CtxPagingRecordsPerPage < 1 BEGIN SET @CtxPagingRecordsPerPage = 50 END;

			DECLARE @V_LASTROW INT = @CtxPagingCurrentPage * @CtxPagingRecordsPerPage;
			DECLARE @V_FIRSTROW INT = @V_LASTROW - @CtxPagingRecordsPerPage + 1;

			SET @V_STATEMENT_DATA = N'WITH PagedRows AS ( ';

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [UserRole] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [UserRole_Id]) AS RowNumber FROM [UserRole] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + N') AS RowNumber FROM [UserRole] WITH(NOLOCK)';
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N'SELECT *, ROW_NUMBER() OVER (ORDER BY [UserRole_Id]) AS RowNumber FROM [UserRole] WITH(NOLOCK)';
			END
			SET @V_STATEMENT_DATA = @V_STATEMENT_DATA + N' ) SELECT * FROM PagedRows WITH(NOLOCK) WHERE RowNumber BETWEEN ' + CAST(@V_FIRSTROW AS VARCHAR(12)) + N' AND ' + CAST(@V_LASTROW AS VARCHAR(12));

		END
		ELSE
		BEGIN

			IF @Filter IS NOT NULL AND @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [UserRole] WITH(NOLOCK) WHERE  ' + @Filter + N' ORDER BY ' + @OrderBy;
			END
			ELSE IF @Filter IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [UserRole] WITH(NOLOCK) WHERE ' + @Filter;
			END
			ELSE IF @OrderBy IS NOT NULL
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [UserRole] WITH(NOLOCK) ORDER BY ' + @OrderBy;
			END
			ELSE
			BEGIN
				SET @V_STATEMENT_DATA = N'SELECT TOP ' + CAST(@MaxRecords AS VARCHAR) + N' * FROM [UserRole] WITH(NOLOCK)';
			END

		END

		SET @V_STATEMENT_TOTAL_RECORDS = 'SELECT COUNT(0) AS TotalRecords FROM [UserRole] WITH(NOLOCK)';

		IF @Filter IS NOT NULL
		BEGIN
			SET @V_STATEMENT_TOTAL_RECORDS = @V_STATEMENT_TOTAL_RECORDS + N' WHERE ' + @Filter;
		END

		EXEC (@V_STATEMENT_DATA);
		EXEC (@V_STATEMENT_TOTAL_RECORDS);

	END TRY
	BEGIN CATCH

		DECLARE @V_NOW DATETIME2(3) = GETDATE();
		DECLARE @V_ERROR_MESSAGE VARCHAR(MAX) = @V_STATEMENT_DATA + N' -> ' + ERROR_MESSAGE();
		DECLARE @V_ERROR_SEVERITY INT = ERROR_SEVERITY();
		DECLARE @V_ERROR_STATE INT = ERROR_STATE();

		-- RAISE() must be called before EXEC [ProcessErrorLog_Save] in order to get the error
		-- on the first result in the SqlDataReader (Save stored procedures return 1 row).

		RAISERROR(@V_ERROR_MESSAGE, @V_ERROR_SEVERITY, @V_ERROR_STATE);

		EXEC [ProcessErrorLog_Save]
			 @ProcessErrorLog_Date = @V_NOW,
			 @ProcessErrorLog_ProcedureName = N'UserRole_Search',
			 @ProcessErrorLog_ErrorMessage = @V_ERROR_MESSAGE,
			 @ProcessErrorLog_ErrorSeverity = @V_ERROR_SEVERITY,
			 @ProcessErrorLog_ErrorState = @V_ERROR_STATE,
			 @ProcessErrorLog_Data = @V_STATEMENT_DATA,
			 @CtxUser = @CtxUser,
			 @CtxCulture = @CtxCulture,
			 @CtxWithContextSecurity = @CtxWithContextSecurity;

		RETURN (@@ROWCOUNT);

	END CATCH
END
GO
